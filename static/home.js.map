{"version":3,"sources":["webpack:///webpack/bootstrap e82569355a7907882c0e","webpack:///./home/static/home/js/paraxify.js","webpack:///./home/static/home/css/paraxify.css","webpack:///./home/static/home/styl/home.styl","webpack:///./~/normalize.css/normalize.css","webpack:///./~/shufflejs/dist/shuffle.js","webpack:///./home/static/home/js/home.js","webpack:///(webpack)/buildin/global.js"],"names":[],"mappings":"kHACA,cAMA,MACA,eAGA,mBACA,GACA,EACA,KAIA,mDAGA,KAGA,OACA,OAIA,IAzBA,iBA4BA,MAGA,iBAA2C,OAAc,EAGzD,qBACA,OACA,8BACA,CACA,gBACA,kBAGA,GAGA,iBACA,YACA,qBAA2B,UAA0B,UACrD,YAAiC,OAAe,EAChD,mBACA,GACA,CAGA,mBAAsD,+CAA+D,EAGrH,MAGA,iCC1DA,CACA,cACA,CACA,gBACA,kBACA,iBACA,WACA,IACA,IACA,EACA,KACA,OACA,iBACA,uBACA,OACA,QAEA,GACA,oBAEA,6BACA,2CAEA,GACA,MAEA,mDACA,wDACO,kCACP,6BAEA,wBAEA,8DACA,eACA,kBACA,KACA,cACA,kBACA,SACA,cACA,MACA,sCACA,wHACA,QACA,kBAEA,4BACA,kBACA,qBAEA,KAEA,SACA,UACA,kBACA,MACA,8BACA,MACA,UAAS,OACT,2BACA,MACA,QAAS,OACT,KACA,oBACA,OACA,MACA,KACA,wCACA,iBACA,4BACA,mBACA,oCACA,qBACA,2GAEA,oBACA,mBACA,4BAGW,gBACX,mBAMA,8DAEA,eAPA,qBACA,2FAGA,qCAIA,+BACA,KACA,CACA,sBACA,kDAIA,YACA,qBACA,OACA,YACA,kEAIA,YAFA,cAGA,MACA,oBACA,sFACA,8CACA,kBACA,KACA,+CAEA,uBAEA,OAEA,mDACA,KAEA,GAEA,WACA,EACA,aACA,CAAC,iCCtID,aCAA,aCAA,kBCAA,4BACA,WAGA,GAAC,kBAAqB,CAMtB,aA4OA,aAMA,CACA,cACA,wBACA,CAEA,CAyLA,iBACA,0FAEA,cAGA,gBACA,kBAEA,mFAGA,wFAJG,kBAKH,EAQA,CACA,cACA,eAEA,WACA,KACA,sCACA,UACA,cACA,WACA,EAEA,OACA,IAkBA,iBACA,aACA,qBACA,IAEA,gBAIA,UACA,YAKA,KACA,iDAEA,IACA,SAGA,sBACA,qBAGA,0BACA,aACA,MAGA,4BACA,iBAGA,0BACA,iBAGA,EACA,CAIA,GACA,IAGA,OACA,YAGA,UACA,MAEA,CAIA,YACA,YACA,KACA,GAEA,cACA,YACA,mDACA,iBAKA,SAEA,iBACA,QACA,mBACA,uBACA,WACA,OAEA,IAEA,gCAEA,WAAqB,qBAErB,IACA,GAEA,cACA,4BACA,IAEA,cACA,4BACA,GASA,CACA,uBACA,WAKA,sCAEA,mBAIA,4BACA,GAOA,CACA,oBAEA,IACA,aAyBA,WAGA,UAAiB,SAA2B,GAE5C,8BAGA,YACA,GASA,CACA,iBACA,cACA,eAAyC,UAAS,GAClD,kCACA,SAIA,UACA,EAWA,CACA,cACA,eACA,eACA,gBACA,eACA,YACA,gBAEA,2BACA,eACA,YAGA,6CAKA,mBACA,UAAiB,KAAU,GAC3B,eAGA,SACA,IAEA,cACA,mCACA,IAEA,iBACA,QACA,gBAGA,CAxsBA,GACA,8BACA,aACA,wBAGA,iCAEA,4BAAC,UACD,sBACA,QACA,iBACA,CACA,WACA,cAGA,uCACA,iEACA,cACA,2CACA,SACA,SACA,+CACA,eACA,CACA,QAEA,GAAO,UACP,MACA,mBACA,CACA,EACA,EAEA,2BACA,6BACA,EAEA,cACA,cACA,WACA,mBACA,yBACA,sBACA,qBAEA,iBASA,EAEA,eACA,uBACA,8CACA,OAAiB,QAAkB,OACnC,mBAEA,SACA,QAEA,iGAMA,eACA,WAAkB,CAAc,iCAChC,OAEA,eAKA,gBA0DA,eARA,6CAXA,UACA,IAEA,gDACA,IACA,EAEA,GACA,OAEA,CAEA,GAxBA,YACA,IAEA,8CACA,SACA,GAEA,GACA,EAGA,EAxBA,YACA,WACA,kCACA,eACA,aAKA,OACA,EAEA,EAzBA,YACA,QAEA,UAAgB,QAAgB,OAChC,MACA,mCAIA,WACA,GAEA,CA+CA,GAEA,EAEA,UACA,YAEA,SAAmB,eAAsB,OACzC,gCAEA,IACA,aACA,gBAKA,WACA,GAUA,wDA0BA,gBAsBA,uBACA,OAEA,WACA,UACA,SAIA,oBAEA,mBACA,IACA,CACA,CAnCA,KACA,0BACA,MAEA,SAIA,iBACA,wBAEA,YACA,gBAEA,iCACA,eACA,IAAG,iBACH,OACA,IAEA,qBA6BA,mBACA,yBAEA,oCAEA,cACA,mBACA,eAAmB,QAAkB,OACrC,WACA,qBACA,kBACA,kCACA,6CAEA,GAEA,0BACA,4BACA,cACA,IACA,EACA,CAEA,gBAOA,mBACA,QAEA,aACA,aACA,GAUA,mBACA,KACA,8BACA,+BACA,CAEA,KACA,EAEA,MACA,MACA,uBACA,uBACA,+BAGA,0BAEA,cACA,gBACA,QAEA,OACA,UACA,eACA,QACA,YAEA,cACA,KACA,uBACA,MACA,6CACA,qCACA,QACG,GACH,KACA,uBACA,MACA,6CACA,sCACA,OACG,GACH,KACA,uBACA,mCACA,+BACA,6BACA,sBACA,EACG,GACH,KACA,+BACA,QAEA,4BACA,0BACA,GACA,EACG,GACH,KACA,kCACA,QAEA,4BACA,6BACA,GACA,EACG,GACH,KACA,6BACA,QAEA,yCACA,yBACA,GACA,EACG,GACH,KACA,0BACA,0CAEA,4CACA,sBACA,IAEA,KACA,EAAC,IAED,MACA,SACA,UACA,eACA,OACA,aACA,wBAEA,qBACA,QACA,SACA,aAEA,WAEA,iBACA,QACA,SAEA,SACA,YAGA,YAEA,QACA,SACA,EACA,aAEA,8BACA,gDACA,gBAAkE,gDAClE,iBAEA,uCACA,qBAEA,cAWA,GAqCA,OAEA,CAGA,cAGA,KAIA,iBAGA,WAyDA,SACA,wBA+KA,eASA,gBACA,4DACA,aAEA,8BAEA,SACA,iBACA,0BACA,6BACA,eACA,kBACA,oBACA,sBACA,qBACA,wBAEA,wCAEA,QACA,uBAGA,iEACA,sBACA,OAEA,OACA,aACA,gBAEA,cACA,KACA,wBACA,iBAEA,mEAEA,oBACA,aAIA,mDAGA,WAGA,iCACA,2DAGA,uDACA,kCAGA,2BAIA,qBAGA,gDAMA,0BACA,iBACA,gGACA,MAQG,GACH,KACA,qCACA,gCACA,uFACA,EASG,GACH,KACA,sCAGA,OACA,+CAGO,qBACP,gBAGO,UACP,UAGA,GACA,IAQG,GACH,KACA,oCAEA,CACA,qDAIA,YACA,qDAEA,SAYG,GACH,KACA,0BACA,oEACA,0EAEA,kCAGA,qCAGA,oBAIA,GACA,iCAGA,IACA,EAUG,GACH,KACA,wCACA,QAEA,KACA,MAGA,qBACA,aAKA,0BACA,0BACA,iBAEA,YAEA,GAGA,GACA,SACA,UAEA,GAUG,GACH,KACA,uCACA,gBASA,aACA,GAEA,IAXA,2CAIA,wCACA,4FAEA,yBAKA,4CACA,YAEA,aAGA,SACA,GAQG,GACH,KACA,yCACA,WACA,cAEA,8BACA,IACA,MAEA,0BACA,IACA,MACA,EAQG,GACH,KACA,6BACA,oEAEA,6BACA,IACA,MACA,EAOG,GACH,KACA,gCACA,oEAEA,6BACA,IACA,SACA,EAOG,GACH,KACA,mCACA,4CACA,MAUG,GACH,KACA,kCACA,oEAEA,sBACA,sBAEA,sJAEA,0BACA,6BACA,EACA,EACG,GACH,KACA,4BACA,QAEA,wDACA,wBACA,aAAO,mBACP,cACA,GACA,EAOG,GACH,KACA,oCACA,qBACA,iCACA,gBACA,wCACA,GAEA,GACG,GACH,KACA,oCACA,sCACA,WACA,SACA,EACG,GACH,KACA,qCACA,sCACA,WACA,SACA,EAUG,GACH,KACA,sCACA,IAGA,cACA,qEAGO,SACP,wCAGO,mBACP,yBAGO,YACP,yDAIA,MAIA,GACA,YAGA,OACA,EASG,GACH,KACA,mCACA,IACA,cACA,qEACO,SACP,8BAEA,2BAGA,YACA,EAQG,GACH,KACA,8BACA,wFAEA,6BACA,8BACA,eAGA,4CAEA,gCAGA,uCACA,uBACA,iBACA,EAMG,GACH,KACA,oCACA,oDACA,IAQG,GACH,KACA,oCACA,eACA,UAQG,GACH,KACA,sCACA,4DACA,iBAMG,GACH,KACA,8BACA,4DAEA,kBAIA,yBACA,oDACA,CACA,WACA,qBAEA,MAOG,GACH,KACA,6BACA,aACA,cACA,aACA,QACA,sBAEA,EAQG,GACH,KACA,4BACA,QAEA,QACA,yBACA,cAMA,kCACA,6BACA,MAIA,WAXA,YACA,uBACA,mCAEA,qCAQA,QAKA,iCAJA,YACA,eAIA,oBAIA,+BACA,oDAEA,oBACA,MACA,UACA,YAGA,SACA,CACA,EASG,GACH,KACA,qCACA,UACA,UACA,kBACA,wBACA,oBACA,4BACA,oCAEA,QAQG,GACH,KACA,0BACA,QAEA,oEAEA,wBACA,yBACA,cACA,0BACA,MAQA,uBACA,OAKA,gCAJA,YACA,uBAKA,6BACA,oDAEA,oBACA,MACA,UACA,YAGA,SACA,CACA,EAOG,GACH,KACA,gCAEA,0BAKA,6CAGA,gBAIA,qBACA,SASG,GACH,KACA,4CACA,WACA,WAEA,UACA,qCAGA,uBACA,cAEA,sBACA,2EAEA,gBACA,eAGA,MACA,EAUG,GACH,KACA,8CACA,yBACA,CACA,aACA,GAEA,0BACA,GASG,GACH,KACA,2CACA,QAEA,wBACA,6CACA,wDACA,GACA,CAQG,GACH,KACA,gCACA,MACA,sBAGA,yBACA,wBAEA,kCACA,0CACO,QACP,gCACA,aAMA,wBAIA,qCACA,CAOG,GACH,KACA,sCACA,QAGA,UAGA,6CACA,kCACA,GAEA,oCACA,MACG,GACH,KACA,kCAEA,2BAGA,4BAGA,OACA,kBAQG,GACH,KACA,sCACA,QAEA,kBACA,2BACA,gBACA,OAEA,oCACA,wBACA,6CACA,QACA,UACA,EACA,EACA,CACG,GACH,KACA,oCACA,0BACA,OACA,wBACA,iBACG,GACH,KACA,kCACA,6BACA,OASG,GACH,KACA,8BACA,MAIA,sBACA,uBAGA,wBAGA,SAGA,eAGA,6BACA,IAOG,GACH,KACA,uBACA,oEAEA,iBAIA,gBAEA,yBACA,4BAEA,iBAIA,SAGA,qBAEA,kCACA,GAQG,GACH,KACA,2BACA,MACA,aAEA,SAIA,mBAEA,OAQG,GACH,KACA,yBACA,MACA,UAQG,GACH,KACA,wBACA,8BACA,cACA,GAGA,mBAGA,yBAGA,iCACA,SACA,qCACA,WAMG,GACH,KACA,0BACA,MACA,YAOG,GACH,KACA,2BACA,MACA,aACA,cAEA,QASG,GACH,KACA,2BACA,QAEA,WAIA,iBAEA,0BACA,4BACA,GAAO,sBACP,SACA,EAEA,mBACA,oDACA,qBAGA,2BACA,2BACA,GAEA,qCAAqD,YACrD,IAGA,4BACA,CACA,kBAGA,kBAEA,SAIA,gDACA,aACA,GACA,QAEA,qEACA,IAQG,GACH,KACA,qCACA,8BAAyC,EAAQ,MACjD,iCACA,qBAIA,UACA,KAMG,GACH,KACA,0BACA,MACA,2DAGA,yCACA,wCAGA,cAGA,2BACA,wBACA,kBACA,uBAIA,UACA,cAyBG,KACH,KACA,+BAEA,mCACA,sBACA,qBAEA,UACA,0BACA,0BACA,wBACA,2BACA,WACA,UACA,EAEA,OACA,OACA,UAEA,GAUG,GACH,KACA,wCACA,QAGA,4BACA,WACA,YACA,yBAGA,6CACA,sBAEA,GACA,UACA,SAEA,GAEA,GAGA,WAGA,sCACA,oCACA,yCACA,KACA,EAEA,KACA,EAAC,IAiGD,MA/FA,kBAEA,mBACA,wBAIA,SACA,aACA,QACA,yBAGkB,mBAClB,WAIA,EACA,cACA,KACA,UAGA,OACA,WAEA,UAGA,gBAGA,WAGA,oBAIA,UAIA,iBAIA,cAIA,YAIA,YAIA,kBAIA,iBAIA,KAGA,SAhwDA,eACA,cAcA,IACA,SACA,qBACA,OACA,QACA,IACA,cAnBA,MAEA,mBACA,IACA,QACA,0BACA,SACA,aACA,yBACA,KACA,EAEA,CASA,eA4uDA,kBAGA,oBAGA,IAKA,0CAGA,KACA,aACA,cACA,qBACA,6BACA,sBAIA,EACA,kLC98DA,GAEA,iDACA,qEACA,0DACA,SAGA,eACA,gBACA,mDACA,8BACA,8BACA,IACA,CAEA,2BACA,iDACA,GACA,uCACA,CACA,GAGA,YAEA,yBACA,gBACA,uCACA,sBACA,qBACA,mEACA,IAEA,kBACA,gBACA,IAEA,EACA,EAGA,oCACA,aACA,mBACA,cACA,qCACA,oBACA,WACA,SACA,SACa,EACb,cAEA,qEACA,iBACA,sBACA,IACA,GACA,CAEA,qEACA,iCACA,2BACA,4BACA,GACA,EACA,EAEA,QAOA,aANA,CACA,IACA,GAEA,GACA,CACC,gBCjFD,GAGA,aACA,OACA,KAAC,IAED,GAEA,0CACA,OAAC,SAED,CACA,4BACA,OAI4C,CAE5C","file":"home.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/static/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e82569355a7907882c0e","// Generated by CoffeeScript 1.7.1\n\n/*\n Paraxify.js - v0.1\n @author Jaime Caballero\n MIT license\n */\n(function(document, window, index) {\n  \"use strict\";\n  var paraxify;\n  paraxify = function(el, options) {\n    var Paraxify, contador, i, opt, pho, posY, screenY;\n    posY = 0;\n    screenY = 0;\n    i = 0;\n    opt = {};\n    pho = [];\n    contador = 0;\n    Paraxify = function(el, options) {\n      this.options = {\n        speed: 1,\n        boost: 0\n      };\n      for (i in options) {\n        this.options[i] = options[i];\n      }\n      if (this.options.speed < 0 || this.options.speed > 1) {\n        this.options.speed = 1;\n      }\n      if (!el) {\n        el = 'paraxify';\n      }\n      if (document.getElementsByClassName(el.replace('.', ''))) {\n        this.photos = document.getElementsByClassName(el.replace('.', ''));\n      } else if (document.querySelector(el) !== false) {\n        this.photos = querySelector(el);\n      } else {\n        throw new Error(\"The elements you're trying to select don't exist.\");\n      }\n      opt = this.options;\n      pho = this.photos;\n      this._init(this);\n    };\n    Paraxify.prototype = {\n      update: function() {\n        screenY = window.innerHeight;\n        i = 0;\n        while (i < pho.length) {\n          pho[i].style.backgroundPosition = \"center center\";\n          pho[i].url = window.getComputedStyle(pho[i], false).backgroundImage.replace(/url\\((['\"])?(.*?)\\1\\)/gi, '$2').split(',')[0];\n          if (!pho[i].img) {\n            pho[i].img = new Image();\n          }\n          if (pho[i].url !== pho[i].img.src) {\n            this._check(i);\n            pho[i].img.src = pho[i].url;\n          }\n          i++;\n        }\n        this._animate();\n      },\n      _init: function() {\n        this.update();\n        window.onscroll = (function() {\n          this._animate();\n        }).bind(this);\n        window.onresize = (function() {\n          this.update();\n        }).bind(this);\n      },\n      _check: function(i) {\n        var actualHeight, main;\n        main = pho[i];\n        main.ok = true;\n        main.bgSize = window.getComputedStyle(main, false).backgroundSize;\n        actualHeight = screenY;\n        pho[i].img.onload = function() {\n          if (main.bgSize === '' || main.bgSize === 'auto') {\n            if (this.height < main.offsetHeight) {\n              main.ok = false;\n              throw new Error(\"The image \" + main.url + \" (\" + this.height + \"px) is too short for that container (\" + main.offsetHeight + \"px).\");\n            } else {\n              actualHeight = this.height;\n              if (this.height < screenY) {\n                actualHeight = actualHeight + ((screenY - main.offsetHeight) * opt.speed);\n              }\n            }\n          } else if (main.bgSize === 'cover') {\n            if (screenY < main.offsetHeight) {\n              main.ok = false;\n              throw new Error(\"The container (\" + main.offsetHeight + \"px) can't be bigger than the image (\" + screenY + \"px).\");\n            }\n          } else {\n            window.getComputedStyle(main, false).backgroundSize === 'cover';\n            this._check(i);\n          }\n          main.diff = -(actualHeight - main.offsetHeight) * opt.speed;\n          main.diff = main.diff - (main.offsetHeight * opt.boost);\n        };\n      },\n      _visible: function(i) {\n        if (((posY + screenY) > pho[i].offsetTop) && (posY < pho[i].offsetTop + pho[i].offsetHeight)) {\n          return true;\n        }\n        return false;\n      },\n      _animate: function() {\n        var per, position;\n        if (window.pageYOffset !== void 0) {\n          posY = window.pageYOffset;\n        } else {\n          posY = (document.documentElement || document.body.parentNode || document.body).scrollTop;\n        }\n        i = 0;\n        while (i < pho.length) {\n          this._check(i);\n          if (pho[i].ok && window.getComputedStyle(pho[i], false).backgroundAttachment === \"fixed\" && this._visible(i)) {\n            per = (posY - pho[i].offsetTop + screenY) / (pho[i].offsetHeight + screenY);\n            position = pho[i].diff * (per - 0.5);\n            if (pho[i].bgSize !== 'cover') {\n              position = position + ((screenY - pho[i].img.height) / 2);\n            }\n            position = Math.round(position * 100) / 100;\n          } else {\n            position = \"center\";\n          }\n          pho[i].style.backgroundPosition = \"center \" + position + \"px\";\n          i++;\n        }\n      }\n    };\n    return new Paraxify(el, options);\n  };\n  window.paraxify = paraxify;\n})(document, window, 0);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./home/static/home/js/paraxify.js\n// module id = 0\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./home/static/home/css/paraxify.css\n// module id = 1\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./home/static/home/styl/home.styl\n// module id = 2\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/normalize.css/normalize.css\n// module id = 3\n// module chunks = 0","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.shuffle = factory());\n}(this, (function () { 'use strict';\n\n// Polyfill for creating CustomEvents on IE9/10/11\n\n// code pulled from:\n// https://github.com/d4tocchini/customevent-polyfill\n// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent#Polyfill\n\ntry {\n    var ce = new window.CustomEvent('test');\n    ce.preventDefault();\n    if (ce.defaultPrevented !== true) {\n        // IE has problems with .preventDefault() on custom events\n        // http://stackoverflow.com/questions/23349191\n        throw new Error('Could not prevent default');\n    }\n} catch(e) {\n  var CustomEvent$1 = function(event, params) {\n    var evt, origPrevent;\n    params = params || {\n      bubbles: false,\n      cancelable: false,\n      detail: undefined\n    };\n\n    evt = document.createEvent(\"CustomEvent\");\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n    origPrevent = evt.preventDefault;\n    evt.preventDefault = function () {\n      origPrevent.call(this);\n      try {\n        Object.defineProperty(this, 'defaultPrevented', {\n          get: function () {\n            return true;\n          }\n        });\n      } catch(e) {\n        this.defaultPrevented = true;\n      }\n    };\n    return evt;\n  };\n\n  CustomEvent$1.prototype = window.Event.prototype;\n  window.CustomEvent = CustomEvent$1; // expose definition to window\n}\n\nvar proto = Element.prototype;\nvar vendor = proto.matches\n  || proto.matchesSelector\n  || proto.webkitMatchesSelector\n  || proto.mozMatchesSelector\n  || proto.msMatchesSelector\n  || proto.oMatchesSelector;\n\nvar index = match;\n\n/**\n * Match `el` to `selector`.\n *\n * @param {Element} el\n * @param {String} selector\n * @return {Boolean}\n * @api public\n */\n\nfunction match(el, selector) {\n  if (vendor) return vendor.call(el, selector);\n  var nodes = el.parentNode.querySelectorAll(selector);\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] == el) return true;\n  }\n  return false;\n}\n\nvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n\n\n\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar index$1 = createCommonjsModule(function (module) {\n'use strict';\n\n// there's 3 implementations written in increasing order of efficiency\n\n// 1 - no Set type is defined\nfunction uniqNoSet(arr) {\n\tvar ret = [];\n\n\tfor (var i = 0; i < arr.length; i++) {\n\t\tif (ret.indexOf(arr[i]) === -1) {\n\t\t\tret.push(arr[i]);\n\t\t}\n\t}\n\n\treturn ret;\n}\n\n// 2 - a simple Set type is defined\nfunction uniqSet(arr) {\n\tvar seen = new Set();\n\treturn arr.filter(function (el) {\n\t\tif (!seen.has(el)) {\n\t\t\tseen.add(el);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t});\n}\n\n// 3 - a standard Set type is defined and it has a forEach method\nfunction uniqSetWithForEach(arr) {\n\tvar ret = [];\n\n\t(new Set(arr)).forEach(function (el) {\n\t\tret.push(el);\n\t});\n\n\treturn ret;\n}\n\n// V8 currently has a broken implementation\n// https://github.com/joyent/node/issues/8449\nfunction doesForEachActuallyWork() {\n\tvar ret = false;\n\n\t(new Set([true])).forEach(function (el) {\n\t\tret = el;\n\t});\n\n\treturn ret === true;\n}\n\nif ('Set' in commonjsGlobal) {\n\tif (typeof Set.prototype.forEach === 'function' && doesForEachActuallyWork()) {\n\t\tmodule.exports = uniqSetWithForEach;\n\t} else {\n\t\tmodule.exports = uniqSet;\n\t}\n} else {\n\tmodule.exports = uniqNoSet;\n}\n});\n\nvar immutable = extend;\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {};\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i];\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n            }\n        }\n    }\n\n    return target\n}\n\nvar index$2 = throttle;\n\n/**\n * Returns a new function that, when invoked, invokes `func` at most once per `wait` milliseconds.\n *\n * @param {Function} func Function to wrap.\n * @param {Number} wait Number of milliseconds that must elapse between `func` invocations.\n * @return {Function} A new function that wraps the `func` function passed in.\n */\n\nfunction throttle (func, wait) {\n  var ctx, args, rtn, timeoutID; // caching\n  var last = 0;\n\n  return function throttled () {\n    ctx = this;\n    args = arguments;\n    var delta = new Date() - last;\n    if (!timeoutID)\n      if (delta >= wait) call();\n      else timeoutID = setTimeout(call, wait - delta);\n    return rtn;\n  };\n\n  function call () {\n    timeoutID = 0;\n    last = +new Date();\n    rtn = func.apply(ctx, args);\n    ctx = null;\n    args = null;\n  }\n}\n\nvar index$3 = function parallel(fns, context, callback) {\n  if (!callback) {\n    if (typeof context === 'function') {\n      callback = context;\n      context = null;\n    } else {\n      callback = noop;\n    }\n  }\n\n  var pending = fns && fns.length;\n  if (!pending) return callback(null, []);\n\n  var finished = false;\n  var results = new Array(pending);\n\n  fns.forEach(context ? function (fn, i) {\n    fn.call(context, maybeDone(i));\n  } : function (fn, i) {\n    fn(maybeDone(i));\n  });\n\n  function maybeDone(i) {\n    return function (err, result) {\n      if (finished) return;\n\n      if (err) {\n        callback(err, results);\n        finished = true;\n        return\n      }\n\n      results[i] = result;\n\n      if (!--pending) callback(null, results);\n    }\n  }\n};\n\nfunction noop() {}\n\n/**\n * Always returns a numeric value, given a value. Logic from jQuery's `isNumeric`.\n * @param {*} value Possibly numeric value.\n * @return {number} `value` or zero if `value` isn't numeric.\n */\nfunction getNumber(value) {\n  return parseFloat(value) || 0;\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar Point = function () {\n\n  /**\n   * Represents a coordinate pair.\n   * @param {number} [x=0] X.\n   * @param {number} [y=0] Y.\n   */\n  function Point(x, y) {\n    classCallCheck(this, Point);\n\n    this.x = getNumber(x);\n    this.y = getNumber(y);\n  }\n\n  /**\n   * Whether two points are equal.\n   * @param {Point} a Point A.\n   * @param {Point} b Point B.\n   * @return {boolean}\n   */\n\n\n  createClass(Point, null, [{\n    key: 'equals',\n    value: function equals(a, b) {\n      return a.x === b.x && a.y === b.y;\n    }\n  }]);\n  return Point;\n}();\n\nvar Classes = {\n  BASE: 'shuffle',\n  SHUFFLE_ITEM: 'shuffle-item',\n  VISIBLE: 'shuffle-item--visible',\n  HIDDEN: 'shuffle-item--hidden'\n};\n\nvar id$1 = 0;\n\nvar ShuffleItem = function () {\n  function ShuffleItem(element) {\n    classCallCheck(this, ShuffleItem);\n\n    id$1 += 1;\n    this.id = id$1;\n    this.element = element;\n    this.isVisible = true;\n  }\n\n  createClass(ShuffleItem, [{\n    key: 'show',\n    value: function show() {\n      this.isVisible = true;\n      this.element.classList.remove(Classes.HIDDEN);\n      this.element.classList.add(Classes.VISIBLE);\n    }\n  }, {\n    key: 'hide',\n    value: function hide() {\n      this.isVisible = false;\n      this.element.classList.remove(Classes.VISIBLE);\n      this.element.classList.add(Classes.HIDDEN);\n    }\n  }, {\n    key: 'init',\n    value: function init() {\n      this.addClasses([Classes.SHUFFLE_ITEM, Classes.VISIBLE]);\n      this.applyCss(ShuffleItem.Css.INITIAL);\n      this.scale = ShuffleItem.Scale.VISIBLE;\n      this.point = new Point();\n    }\n  }, {\n    key: 'addClasses',\n    value: function addClasses(classes) {\n      var _this = this;\n\n      classes.forEach(function (className) {\n        _this.element.classList.add(className);\n      });\n    }\n  }, {\n    key: 'removeClasses',\n    value: function removeClasses(classes) {\n      var _this2 = this;\n\n      classes.forEach(function (className) {\n        _this2.element.classList.remove(className);\n      });\n    }\n  }, {\n    key: 'applyCss',\n    value: function applyCss(obj) {\n      var _this3 = this;\n\n      Object.keys(obj).forEach(function (key) {\n        _this3.element.style[key] = obj[key];\n      });\n    }\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.removeClasses([Classes.HIDDEN, Classes.VISIBLE, Classes.SHUFFLE_ITEM]);\n\n      this.element.removeAttribute('style');\n      this.element = null;\n    }\n  }]);\n  return ShuffleItem;\n}();\n\nShuffleItem.Css = {\n  INITIAL: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    visibility: 'visible',\n    'will-change': 'transform'\n  },\n  VISIBLE: {\n    before: {\n      opacity: 1,\n      visibility: 'visible'\n    },\n    after: {}\n  },\n  HIDDEN: {\n    before: {\n      opacity: 0\n    },\n    after: {\n      visibility: 'hidden'\n    }\n  }\n};\n\nShuffleItem.Scale = {\n  VISIBLE: 1,\n  HIDDEN: 0.001\n};\n\nvar element = document.body || document.documentElement;\nvar e$1 = document.createElement('div');\ne$1.style.cssText = 'width:10px;padding:2px;box-sizing:border-box;';\nelement.appendChild(e$1);\n\nvar width = window.getComputedStyle(e$1, null).width;\nvar ret = width === '10px';\n\nelement.removeChild(e$1);\n\n/**\n * Retrieve the computed style for an element, parsed as a float.\n * @param {Element} element Element to get style for.\n * @param {string} style Style property.\n * @param {CSSStyleDeclaration} [styles] Optionally include clean styles to\n *     use instead of asking for them again.\n * @return {number} The parsed computed value or zero if that fails because IE\n *     will return 'auto' when the element doesn't have margins instead of\n *     the computed style.\n */\nfunction getNumberStyle(element, style) {\n  var styles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window.getComputedStyle(element, null);\n\n  var value = getNumber(styles[style]);\n\n  // Support IE<=11 and W3C spec.\n  if (!ret && style === 'width') {\n    value += getNumber(styles.paddingLeft) + getNumber(styles.paddingRight) + getNumber(styles.borderLeftWidth) + getNumber(styles.borderRightWidth);\n  } else if (!ret && style === 'height') {\n    value += getNumber(styles.paddingTop) + getNumber(styles.paddingBottom) + getNumber(styles.borderTopWidth) + getNumber(styles.borderBottomWidth);\n  }\n\n  return value;\n}\n\n/**\n * Fisher-Yates shuffle.\n * http://stackoverflow.com/a/962890/373422\n * https://bost.ocks.org/mike/shuffle/\n * @param {Array} array Array to shuffle.\n * @return {Array} Randomly sorted array.\n */\nfunction randomize(array) {\n  var n = array.length;\n\n  while (n) {\n    n -= 1;\n    var i = Math.floor(Math.random() * (n + 1));\n    var temp = array[i];\n    array[i] = array[n];\n    array[n] = temp;\n  }\n\n  return array;\n}\n\nvar defaults$1 = {\n  // Use array.reverse() to reverse the results\n  reverse: false,\n\n  // Sorting function\n  by: null,\n\n  // If true, this will skip the sorting and return a randomized order in the array\n  randomize: false,\n\n  // Determines which property of each item in the array is passed to the\n  // sorting method.\n  key: 'element'\n};\n\n// You can return `undefined` from the `by` function to revert to DOM order.\nfunction sorter(arr, options) {\n  var opts = immutable(defaults$1, options);\n  var original = [].slice.call(arr);\n  var revert = false;\n\n  if (!arr.length) {\n    return [];\n  }\n\n  if (opts.randomize) {\n    return randomize(arr);\n  }\n\n  // Sort the elements by the opts.by function.\n  // If we don't have opts.by, default to DOM order\n  if (typeof opts.by === 'function') {\n    arr.sort(function (a, b) {\n      // Exit early if we already know we want to revert\n      if (revert) {\n        return 0;\n      }\n\n      var valA = opts.by(a[opts.key]);\n      var valB = opts.by(b[opts.key]);\n\n      // If both values are undefined, use the DOM order\n      if (valA === undefined && valB === undefined) {\n        revert = true;\n        return 0;\n      }\n\n      if (valA < valB || valA === 'sortFirst' || valB === 'sortLast') {\n        return -1;\n      }\n\n      if (valA > valB || valA === 'sortLast' || valB === 'sortFirst') {\n        return 1;\n      }\n\n      return 0;\n    });\n  }\n\n  // Revert to the original array if necessary\n  if (revert) {\n    return original;\n  }\n\n  if (opts.reverse) {\n    arr.reverse();\n  }\n\n  return arr;\n}\n\nvar transitions = {};\nvar eventName = 'transitionend';\nvar count = 0;\n\nfunction uniqueId() {\n  count += 1;\n  return eventName + count;\n}\n\nfunction cancelTransitionEnd(id) {\n  if (transitions[id]) {\n    transitions[id].element.removeEventListener(eventName, transitions[id].listener);\n    transitions[id] = null;\n    return true;\n  }\n\n  return false;\n}\n\nfunction onTransitionEnd(element, callback) {\n  var id = uniqueId();\n  var listener = function listener(evt) {\n    if (evt.currentTarget === evt.target) {\n      cancelTransitionEnd(id);\n      callback(evt);\n    }\n  };\n\n  element.addEventListener(eventName, listener);\n\n  transitions[id] = { element: element, listener: listener };\n\n  return id;\n}\n\nfunction arrayMax(array) {\n  return Math.max.apply(Math, array); // eslint-disable-line prefer-spread\n}\n\nfunction arrayMin(array) {\n  return Math.min.apply(Math, array); // eslint-disable-line prefer-spread\n}\n\n/**\n * Determine the number of columns an items spans.\n * @param {number} itemWidth Width of the item.\n * @param {number} columnWidth Width of the column (includes gutter).\n * @param {number} columns Total number of columns\n * @param {number} threshold A buffer value for the size of the column to fit.\n * @return {number}\n */\nfunction getColumnSpan(itemWidth, columnWidth, columns, threshold) {\n  var columnSpan = itemWidth / columnWidth;\n\n  // If the difference between the rounded column span number and the\n  // calculated column span number is really small, round the number to\n  // make it fit.\n  if (Math.abs(Math.round(columnSpan) - columnSpan) < threshold) {\n    // e.g. columnSpan = 4.0089945390298745\n    columnSpan = Math.round(columnSpan);\n  }\n\n  // Ensure the column span is not more than the amount of columns in the whole layout.\n  return Math.min(Math.ceil(columnSpan), columns);\n}\n\n/**\n * Retrieves the column set to use for placement.\n * @param {number} columnSpan The number of columns this current item spans.\n * @param {number} columns The total columns in the grid.\n * @return {Array.<number>} An array of numbers represeting the column set.\n */\nfunction getAvailablePositions(positions, columnSpan, columns) {\n  // The item spans only one column.\n  if (columnSpan === 1) {\n    return positions;\n  }\n\n  // The item spans more than one column, figure out how many different\n  // places it could fit horizontally.\n  // The group count is the number of places within the positions this block\n  // could fit, ignoring the current positions of items.\n  // Imagine a 2 column brick as the second item in a 4 column grid with\n  // 10px height each. Find the places it would fit:\n  // [20, 10, 10, 0]\n  //  |   |   |\n  //  *   *   *\n  //\n  // Then take the places which fit and get the bigger of the two:\n  // max([20, 10]), max([10, 10]), max([10, 0]) = [20, 10, 0]\n  //\n  // Next, find the first smallest number (the short column).\n  // [20, 10, 0]\n  //          |\n  //          *\n  //\n  // And that's where it should be placed!\n  //\n  // Another example where the second column's item extends past the first:\n  // [10, 20, 10, 0] => [20, 20, 10] => 10\n  var available = [];\n\n  // For how many possible positions for this item there are.\n  for (var i = 0; i <= columns - columnSpan; i++) {\n    // Find the bigger value for each place it could fit.\n    available.push(arrayMax(positions.slice(i, i + columnSpan)));\n  }\n\n  return available;\n}\n\n/**\n * Find index of short column, the first from the left where this item will go.\n *\n * @param {Array.<number>} positions The array to search for the smallest number.\n * @param {number} buffer Optional buffer which is very useful when the height\n *     is a percentage of the width.\n * @return {number} Index of the short column.\n */\nfunction getShortColumn(positions, buffer) {\n  var minPosition = arrayMin(positions);\n  for (var i = 0, len = positions.length; i < len; i++) {\n    if (positions[i] >= minPosition - buffer && positions[i] <= minPosition + buffer) {\n      return i;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * Determine the location of the next item, based on its size.\n * @param {Object} itemSize Object with width and height.\n * @param {Array.<number>} positions Positions of the other current items.\n * @param {number} gridSize The column width or row height.\n * @param {number} total The total number of columns or rows.\n * @param {number} threshold Buffer value for the column to fit.\n * @param {number} buffer Vertical buffer for the height of items.\n * @return {Point}\n */\nfunction getItemPosition(_ref) {\n  var itemSize = _ref.itemSize,\n      positions = _ref.positions,\n      gridSize = _ref.gridSize,\n      total = _ref.total,\n      threshold = _ref.threshold,\n      buffer = _ref.buffer;\n\n  var span = getColumnSpan(itemSize.width, gridSize, total, threshold);\n  var setY = getAvailablePositions(positions, span, total);\n  var shortColumnIndex = getShortColumn(setY, buffer);\n\n  // Position the item\n  var point = new Point(Math.round(gridSize * shortColumnIndex), Math.round(setY[shortColumnIndex]));\n\n  // Update the columns array with the new values for each column.\n  // e.g. before the update the columns could be [250, 0, 0, 0] for an item\n  // which spans 2 columns. After it would be [250, itemHeight, itemHeight, 0].\n  var setHeight = setY[shortColumnIndex] + itemSize.height;\n  for (var i = 0; i < span; i++) {\n    positions[shortColumnIndex + i] = setHeight;\n  }\n\n  return point;\n}\n\nfunction toArray$$1(arrayLike) {\n  return Array.prototype.slice.call(arrayLike);\n}\n\nfunction arrayIncludes(array, obj) {\n  return array.indexOf(obj) > -1;\n}\n\n// Used for unique instance variables\nvar id = 0;\n\nvar Shuffle = function () {\n\n  /**\n   * Categorize, sort, and filter a responsive grid of items.\n   *\n   * @param {Element} element An element which is the parent container for the grid items.\n   * @param {Object} [options=Shuffle.options] Options object.\n   * @constructor\n   */\n  function Shuffle(element) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, Shuffle);\n\n    this.options = immutable(Shuffle.options, options);\n\n    this.useSizer = false;\n    this.lastSort = {};\n    this.group = Shuffle.ALL_ITEMS;\n    this.lastFilter = Shuffle.ALL_ITEMS;\n    this.isEnabled = true;\n    this.isDestroyed = false;\n    this.isInitialized = false;\n    this._transitions = [];\n    this.isTransitioning = false;\n    this._queue = [];\n\n    var el = this._getElementOption(element);\n\n    if (!el) {\n      throw new TypeError('Shuffle needs to be initialized with an element.');\n    }\n\n    this.element = el;\n    this.id = 'shuffle_' + id;\n    id += 1;\n\n    this._init();\n    this.isInitialized = true;\n  }\n\n  createClass(Shuffle, [{\n    key: '_init',\n    value: function _init() {\n      this.items = this._getItems();\n\n      this.options.sizer = this._getElementOption(this.options.sizer);\n\n      if (this.options.sizer) {\n        this.useSizer = true;\n      }\n\n      // Add class and invalidate styles\n      this.element.classList.add(Shuffle.Classes.BASE);\n\n      // Set initial css for each item\n      this._initItems();\n\n      // Bind resize events\n      this._onResize = this._getResizeFunction();\n      window.addEventListener('resize', this._onResize);\n\n      // Get container css all in one request. Causes reflow\n      var containerCss = window.getComputedStyle(this.element, null);\n      var containerWidth = Shuffle.getSize(this.element).width;\n\n      // Add styles to the container if it doesn't have them.\n      this._validateStyles(containerCss);\n\n      // We already got the container's width above, no need to cause another\n      // reflow getting it again... Calculate the number of columns there will be\n      this._setColumns(containerWidth);\n\n      // Kick off!\n      this.filter(this.options.group, this.options.initialSort);\n\n      // The shuffle items haven't had transitions set on them yet so the user\n      // doesn't see the first layout. Set them now that the first layout is done.\n      // First, however, a synchronous layout must be caused for the previous\n      // styles to be applied without transitions.\n      this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n      this._setTransitions();\n      this.element.style.transition = 'height ' + this.options.speed + 'ms ' + this.options.easing;\n    }\n\n    /**\n     * Returns a throttled and proxied function for the resize handler.\n     * @return {Function}\n     * @private\n     */\n\n  }, {\n    key: '_getResizeFunction',\n    value: function _getResizeFunction() {\n      var resizeFunction = this._handleResize.bind(this);\n      return this.options.throttle ? this.options.throttle(resizeFunction, this.options.throttleTime) : resizeFunction;\n    }\n\n    /**\n     * Retrieve an element from an option.\n     * @param {string|jQuery|Element} option The option to check.\n     * @return {?Element} The plain element or null.\n     * @private\n     */\n\n  }, {\n    key: '_getElementOption',\n    value: function _getElementOption(option) {\n      // If column width is a string, treat is as a selector and search for the\n      // sizer element within the outermost container\n      if (typeof option === 'string') {\n        return this.element.querySelector(option);\n\n        // Check for an element\n      } else if (option && option.nodeType && option.nodeType === 1) {\n        return option;\n\n        // Check for jQuery object\n      } else if (option && option.jquery) {\n        return option[0];\n      }\n\n      return null;\n    }\n\n    /**\n     * Ensures the shuffle container has the css styles it needs applied to it.\n     * @param {Object} styles Key value pairs for position and overflow.\n     * @private\n     */\n\n  }, {\n    key: '_validateStyles',\n    value: function _validateStyles(styles) {\n      // Position cannot be static.\n      if (styles.position === 'static') {\n        this.element.style.position = 'relative';\n      }\n\n      // Overflow has to be hidden.\n      if (styles.overflow !== 'hidden') {\n        this.element.style.overflow = 'hidden';\n      }\n    }\n\n    /**\n     * Filter the elements by a category.\n     * @param {string} [category] Category to filter by. If it's given, the last\n     *     category will be used to filter the items.\n     * @param {Array} [collection] Optionally filter a collection. Defaults to\n     *     all the items.\n     * @return {!{visible: Array, hidden: Array}}\n     * @private\n     */\n\n  }, {\n    key: '_filter',\n    value: function _filter() {\n      var category = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.lastFilter;\n      var collection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.items;\n\n      var set$$1 = this._getFilteredSets(category, collection);\n\n      // Individually add/remove hidden/visible classes\n      this._toggleFilterClasses(set$$1);\n\n      // Save the last filter in case elements are appended.\n      this.lastFilter = category;\n\n      // This is saved mainly because providing a filter function (like searching)\n      // will overwrite the `lastFilter` property every time its called.\n      if (typeof category === 'string') {\n        this.group = category;\n      }\n\n      return set$$1;\n    }\n\n    /**\n     * Returns an object containing the visible and hidden elements.\n     * @param {string|Function} category Category or function to filter by.\n     * @param {Array.<Element>} items A collection of items to filter.\n     * @return {!{visible: Array, hidden: Array}}\n     * @private\n     */\n\n  }, {\n    key: '_getFilteredSets',\n    value: function _getFilteredSets(category, items) {\n      var _this = this;\n\n      var visible = [];\n      var hidden = [];\n\n      // category === 'all', add visible class to everything\n      if (category === Shuffle.ALL_ITEMS) {\n        visible = items;\n\n        // Loop through each item and use provided function to determine\n        // whether to hide it or not.\n      } else {\n        items.forEach(function (item) {\n          if (_this._doesPassFilter(category, item.element)) {\n            visible.push(item);\n          } else {\n            hidden.push(item);\n          }\n        });\n      }\n\n      return {\n        visible: visible,\n        hidden: hidden\n      };\n    }\n\n    /**\n     * Test an item to see if it passes a category.\n     * @param {string|Function} category Category or function to filter by.\n     * @param {Element} element An element to test.\n     * @return {boolean} Whether it passes the category/filter.\n     * @private\n     */\n\n  }, {\n    key: '_doesPassFilter',\n    value: function _doesPassFilter(category, element) {\n      if (typeof category === 'function') {\n        return category.call(element, element, this);\n      }\n\n      // Check each element's data-groups attribute against the given category.\n      var attr = element.getAttribute('data-' + Shuffle.FILTER_ATTRIBUTE_KEY);\n      var keys = this.options.delimeter ? attr.split(this.options.delimeter) : JSON.parse(attr);\n\n      function testCategory(category) {\n        return arrayIncludes(keys, category);\n      }\n\n      if (Array.isArray(category)) {\n        if (this.options.filterMode === Shuffle.FilterMode.ANY) {\n          return category.some(testCategory);\n        }\n        return category.every(testCategory);\n      }\n\n      return arrayIncludes(keys, category);\n    }\n\n    /**\n     * Toggles the visible and hidden class names.\n     * @param {{visible, hidden}} Object with visible and hidden arrays.\n     * @private\n     */\n\n  }, {\n    key: '_toggleFilterClasses',\n    value: function _toggleFilterClasses(_ref) {\n      var visible = _ref.visible,\n          hidden = _ref.hidden;\n\n      visible.forEach(function (item) {\n        item.show();\n      });\n\n      hidden.forEach(function (item) {\n        item.hide();\n      });\n    }\n\n    /**\n     * Set the initial css for each item\n     * @param {Array.<ShuffleItem>} [items] Optionally specifiy at set to initialize.\n     * @private\n     */\n\n  }, {\n    key: '_initItems',\n    value: function _initItems() {\n      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.items;\n\n      items.forEach(function (item) {\n        item.init();\n      });\n    }\n\n    /**\n     * Remove element reference and styles.\n     * @private\n     */\n\n  }, {\n    key: '_disposeItems',\n    value: function _disposeItems() {\n      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.items;\n\n      items.forEach(function (item) {\n        item.dispose();\n      });\n    }\n\n    /**\n     * Updates the visible item count.\n     * @private\n     */\n\n  }, {\n    key: '_updateItemCount',\n    value: function _updateItemCount() {\n      this.visibleItems = this._getFilteredItems().length;\n    }\n\n    /**\n     * Sets css transform transition on a group of elements. This is not executed\n     * at the same time as `item.init` so that transitions don't occur upon\n     * initialization of Shuffle.\n     * @param {Array.<ShuffleItem>} items Shuffle items to set transitions on.\n     * @private\n     */\n\n  }, {\n    key: '_setTransitions',\n    value: function _setTransitions() {\n      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.items;\n\n      var speed = this.options.speed;\n      var easing = this.options.easing;\n\n      var str = this.options.useTransforms ? 'transform ' + speed + 'ms ' + easing + ', opacity ' + speed + 'ms ' + easing : 'top ' + speed + 'ms ' + easing + ', left ' + speed + 'ms ' + easing + ', opacity ' + speed + 'ms ' + easing;\n\n      items.forEach(function (item) {\n        item.element.style.transition = str;\n      });\n    }\n  }, {\n    key: '_getItems',\n    value: function _getItems() {\n      var _this2 = this;\n\n      return toArray$$1(this.element.children).filter(function (el) {\n        return index(el, _this2.options.itemSelector);\n      }).map(function (el) {\n        return new ShuffleItem(el);\n      });\n    }\n\n    /**\n     * When new elements are added to the shuffle container, update the array of\n     * items because that is the order `_layout` calls them.\n     */\n\n  }, {\n    key: '_updateItemsOrder',\n    value: function _updateItemsOrder() {\n      var children = this.element.children;\n      this.items = sorter(this.items, {\n        by: function by(element) {\n          return Array.prototype.indexOf.call(children, element);\n        }\n      });\n    }\n  }, {\n    key: '_getFilteredItems',\n    value: function _getFilteredItems() {\n      return this.items.filter(function (item) {\n        return item.isVisible;\n      });\n    }\n  }, {\n    key: '_getConcealedItems',\n    value: function _getConcealedItems() {\n      return this.items.filter(function (item) {\n        return !item.isVisible;\n      });\n    }\n\n    /**\n     * Returns the column size, based on column width and sizer options.\n     * @param {number} containerWidth Size of the parent container.\n     * @param {number} gutterSize Size of the gutters.\n     * @return {number}\n     * @private\n     */\n\n  }, {\n    key: '_getColumnSize',\n    value: function _getColumnSize(containerWidth, gutterSize) {\n      var size = void 0;\n\n      // If the columnWidth property is a function, then the grid is fluid\n      if (typeof this.options.columnWidth === 'function') {\n        size = this.options.columnWidth(containerWidth);\n\n        // columnWidth option isn't a function, are they using a sizing element?\n      } else if (this.useSizer) {\n        size = Shuffle.getSize(this.options.sizer).width;\n\n        // if not, how about the explicitly set option?\n      } else if (this.options.columnWidth) {\n        size = this.options.columnWidth;\n\n        // or use the size of the first item\n      } else if (this.items.length > 0) {\n        size = Shuffle.getSize(this.items[0].element, true).width;\n\n        // if there's no items, use size of container\n      } else {\n        size = containerWidth;\n      }\n\n      // Don't let them set a column width of zero.\n      if (size === 0) {\n        size = containerWidth;\n      }\n\n      return size + gutterSize;\n    }\n\n    /**\n     * Returns the gutter size, based on gutter width and sizer options.\n     * @param {number} containerWidth Size of the parent container.\n     * @return {number}\n     * @private\n     */\n\n  }, {\n    key: '_getGutterSize',\n    value: function _getGutterSize(containerWidth) {\n      var size = void 0;\n      if (typeof this.options.gutterWidth === 'function') {\n        size = this.options.gutterWidth(containerWidth);\n      } else if (this.useSizer) {\n        size = getNumberStyle(this.options.sizer, 'marginLeft');\n      } else {\n        size = this.options.gutterWidth;\n      }\n\n      return size;\n    }\n\n    /**\n     * Calculate the number of columns to be used. Gets css if using sizer element.\n     * @param {number} [containerWidth] Optionally specify a container width if\n     *    it's already available.\n     */\n\n  }, {\n    key: '_setColumns',\n    value: function _setColumns() {\n      var containerWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Shuffle.getSize(this.element).width;\n\n      var gutter = this._getGutterSize(containerWidth);\n      var columnWidth = this._getColumnSize(containerWidth, gutter);\n      var calculatedColumns = (containerWidth + gutter) / columnWidth;\n\n      // Widths given from getStyles are not precise enough...\n      if (Math.abs(Math.round(calculatedColumns) - calculatedColumns) < this.options.columnThreshold) {\n        // e.g. calculatedColumns = 11.998876\n        calculatedColumns = Math.round(calculatedColumns);\n      }\n\n      this.cols = Math.max(Math.floor(calculatedColumns), 1);\n      this.containerWidth = containerWidth;\n      this.colWidth = columnWidth;\n    }\n\n    /**\n     * Adjust the height of the grid\n     */\n\n  }, {\n    key: '_setContainerSize',\n    value: function _setContainerSize() {\n      this.element.style.height = this._getContainerSize() + 'px';\n    }\n\n    /**\n     * Based on the column heights, it returns the biggest one.\n     * @return {number}\n     * @private\n     */\n\n  }, {\n    key: '_getContainerSize',\n    value: function _getContainerSize() {\n      return arrayMax(this.positions);\n    }\n\n    /**\n     * Get the clamped stagger amount.\n     * @param {number} index Index of the item to be staggered.\n     * @return {number}\n     */\n\n  }, {\n    key: '_getStaggerAmount',\n    value: function _getStaggerAmount(index$$1) {\n      return Math.min(index$$1 * this.options.staggerAmount, this.options.staggerAmountMax);\n    }\n\n    /**\n     * @return {boolean} Whether the event was prevented or not.\n     */\n\n  }, {\n    key: '_dispatch',\n    value: function _dispatch(name) {\n      var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (this.isDestroyed) {\n        return false;\n      }\n\n      details.shuffle = this;\n      return !this.element.dispatchEvent(new CustomEvent(name, {\n        bubbles: true,\n        cancelable: false,\n        detail: details\n      }));\n    }\n\n    /**\n     * Zeros out the y columns array, which is used to determine item placement.\n     * @private\n     */\n\n  }, {\n    key: '_resetCols',\n    value: function _resetCols() {\n      var i = this.cols;\n      this.positions = [];\n      while (i) {\n        i -= 1;\n        this.positions.push(0);\n      }\n    }\n\n    /**\n     * Loops through each item that should be shown and calculates the x, y position.\n     * @param {Array.<ShuffleItem>} items Array of items that will be shown/layed\n     *     out in order in their array.\n     */\n\n  }, {\n    key: '_layout',\n    value: function _layout(items) {\n      var _this3 = this;\n\n      var count = 0;\n      items.forEach(function (item) {\n        var currPos = item.point;\n        var currScale = item.scale;\n        var itemSize = Shuffle.getSize(item.element, true);\n        var pos = _this3._getItemPosition(itemSize);\n\n        function callback() {\n          item.element.style.transitionDelay = '';\n          item.applyCss(ShuffleItem.Css.VISIBLE.after);\n        }\n\n        // If the item will not change its position, do not add it to the render\n        // queue. Transitions don't fire when setting a property to the same value.\n        if (Point.equals(currPos, pos) && currScale === ShuffleItem.Scale.VISIBLE) {\n          item.applyCss(ShuffleItem.Css.VISIBLE.before);\n          callback();\n          return;\n        }\n\n        item.point = pos;\n        item.scale = ShuffleItem.Scale.VISIBLE;\n\n        // Use xtend here to clone the object so that the `before` object isn't\n        // modified when the transition delay is added.\n        var styles = immutable(ShuffleItem.Css.VISIBLE.before);\n        styles.transitionDelay = _this3._getStaggerAmount(count) + 'ms';\n\n        _this3._queue.push({\n          item: item,\n          styles: styles,\n          callback: callback\n        });\n\n        count += 1;\n      });\n    }\n\n    /**\n     * Determine the location of the next item, based on its size.\n     * @param {{width: number, height: number}} itemSize Object with width and height.\n     * @return {Point}\n     * @private\n     */\n\n  }, {\n    key: '_getItemPosition',\n    value: function _getItemPosition(itemSize) {\n      return getItemPosition({\n        itemSize: itemSize,\n        positions: this.positions,\n        gridSize: this.colWidth,\n        total: this.cols,\n        threshold: this.options.columnThreshold,\n        buffer: this.options.buffer\n      });\n    }\n\n    /**\n     * Hides the elements that don't match our filter.\n     * @param {Array.<ShuffleItem>} collection Collection to shrink.\n     * @private\n     */\n\n  }, {\n    key: '_shrink',\n    value: function _shrink() {\n      var _this4 = this;\n\n      var collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._getConcealedItems();\n\n      var count = 0;\n      collection.forEach(function (item) {\n        function callback() {\n          item.applyCss(ShuffleItem.Css.HIDDEN.after);\n        }\n\n        // Continuing would add a transitionend event listener to the element, but\n        // that listener would not execute because the transform and opacity would\n        // stay the same.\n        // The callback is executed here because it is not guaranteed to be called\n        // after the transitionend event because the transitionend could be\n        // canceled if another animation starts.\n        if (item.scale === ShuffleItem.Scale.HIDDEN) {\n          item.applyCss(ShuffleItem.Css.HIDDEN.before);\n          callback();\n          return;\n        }\n\n        item.scale = ShuffleItem.Scale.HIDDEN;\n\n        var styles = immutable(ShuffleItem.Css.HIDDEN.before);\n        styles.transitionDelay = _this4._getStaggerAmount(count) + 'ms';\n\n        _this4._queue.push({\n          item: item,\n          styles: styles,\n          callback: callback\n        });\n\n        count += 1;\n      });\n    }\n\n    /**\n     * Resize handler.\n     * @private\n     */\n\n  }, {\n    key: '_handleResize',\n    value: function _handleResize() {\n      // If shuffle is disabled, destroyed, don't do anything\n      if (!this.isEnabled || this.isDestroyed) {\n        return;\n      }\n\n      // Will need to check height in the future if it's layed out horizontaly\n      var containerWidth = Shuffle.getSize(this.element).width;\n\n      // containerWidth hasn't changed, don't do anything\n      if (containerWidth === this.containerWidth) {\n        return;\n      }\n\n      this.update();\n    }\n\n    /**\n     * Returns styles which will be applied to the an item for a transition.\n     * @param {Object} obj Transition options.\n     * @return {!Object} Transforms for transitions, left/top for animate.\n     * @private\n     */\n\n  }, {\n    key: '_getStylesForTransition',\n    value: function _getStylesForTransition(_ref2) {\n      var item = _ref2.item,\n          styles = _ref2.styles;\n\n      if (!styles.transitionDelay) {\n        styles.transitionDelay = '0ms';\n      }\n\n      var x = item.point.x;\n      var y = item.point.y;\n\n      if (this.options.useTransforms) {\n        styles.transform = 'translate(' + x + 'px, ' + y + 'px) scale(' + item.scale + ')';\n      } else {\n        styles.left = x + 'px';\n        styles.top = y + 'px';\n      }\n\n      return styles;\n    }\n\n    /**\n     * Listen for the transition end on an element and execute the itemCallback\n     * when it finishes.\n     * @param {Element} element Element to listen on.\n     * @param {Function} itemCallback Callback for the item.\n     * @param {Function} done Callback to notify `parallel` that this one is done.\n     */\n\n  }, {\n    key: '_whenTransitionDone',\n    value: function _whenTransitionDone(element, itemCallback, done) {\n      var id = onTransitionEnd(element, function (evt) {\n        itemCallback();\n        done(null, evt);\n      });\n\n      this._transitions.push(id);\n    }\n\n    /**\n     * Return a function which will set CSS styles and call the `done` function\n     * when (if) the transition finishes.\n     * @param {Object} opts Transition object.\n     * @return {Function} A function to be called with a `done` function.\n     */\n\n  }, {\n    key: '_getTransitionFunction',\n    value: function _getTransitionFunction(opts) {\n      var _this5 = this;\n\n      return function (done) {\n        opts.item.applyCss(_this5._getStylesForTransition(opts));\n        _this5._whenTransitionDone(opts.item.element, opts.callback, done);\n      };\n    }\n\n    /**\n     * Execute the styles gathered in the style queue. This applies styles to elements,\n     * triggering transitions.\n     * @private\n     */\n\n  }, {\n    key: '_processQueue',\n    value: function _processQueue() {\n      if (this.isTransitioning) {\n        this._cancelMovement();\n      }\n\n      var hasSpeed = this.options.speed > 0;\n      var hasQueue = this._queue.length > 0;\n\n      if (hasQueue && hasSpeed && this.isInitialized) {\n        this._startTransitions(this._queue);\n      } else if (hasQueue) {\n        this._styleImmediately(this._queue);\n        this._dispatchLayout();\n\n        // A call to layout happened, but none of the newly visible items will\n        // change position or the transition duration is zero, which will not trigger\n        // the transitionend event.\n      } else {\n        this._dispatchLayout();\n      }\n\n      // Remove everything in the style queue\n      this._queue.length = 0;\n    }\n\n    /**\n     * Wait for each transition to finish, the emit the layout event.\n     * @param {Array.<Object>} transitions Array of transition objects.\n     */\n\n  }, {\n    key: '_startTransitions',\n    value: function _startTransitions(transitions) {\n      var _this6 = this;\n\n      // Set flag that shuffle is currently in motion.\n      this.isTransitioning = true;\n\n      // Create an array of functions to be called.\n      var callbacks = transitions.map(function (obj) {\n        return _this6._getTransitionFunction(obj);\n      });\n\n      index$3(callbacks, this._movementFinished.bind(this));\n    }\n  }, {\n    key: '_cancelMovement',\n    value: function _cancelMovement() {\n      // Remove the transition end event for each listener.\n      this._transitions.forEach(cancelTransitionEnd);\n\n      // Reset the array.\n      this._transitions.length = 0;\n\n      // Show it's no longer active.\n      this.isTransitioning = false;\n    }\n\n    /**\n     * Apply styles without a transition.\n     * @param {Array.<Object>} objects Array of transition objects.\n     * @private\n     */\n\n  }, {\n    key: '_styleImmediately',\n    value: function _styleImmediately(objects) {\n      var _this7 = this;\n\n      if (objects.length) {\n        var elements = objects.map(function (obj) {\n          return obj.item.element;\n        });\n\n        Shuffle._skipTransitions(elements, function () {\n          objects.forEach(function (obj) {\n            obj.item.applyCss(_this7._getStylesForTransition(obj));\n            obj.callback();\n          });\n        });\n      }\n    }\n  }, {\n    key: '_movementFinished',\n    value: function _movementFinished() {\n      this._transitions.length = 0;\n      this.isTransitioning = false;\n      this._dispatchLayout();\n    }\n  }, {\n    key: '_dispatchLayout',\n    value: function _dispatchLayout() {\n      this._dispatch(Shuffle.EventType.LAYOUT);\n    }\n\n    /**\n     * The magic. This is what makes the plugin 'shuffle'\n     * @param {string|Function|Array.<string>} [category] Category to filter by.\n     *     Can be a function, string, or array of strings.\n     * @param {Object} [sortObj] A sort object which can sort the visible set\n     */\n\n  }, {\n    key: 'filter',\n    value: function filter(category, sortObj) {\n      if (!this.isEnabled) {\n        return;\n      }\n\n      if (!category || category && category.length === 0) {\n        category = Shuffle.ALL_ITEMS; // eslint-disable-line no-param-reassign\n      }\n\n      this._filter(category);\n\n      // Shrink each hidden item\n      this._shrink();\n\n      // How many visible elements?\n      this._updateItemCount();\n\n      // Update transforms on visible elements so they will animate to their new positions.\n      this.sort(sortObj);\n    }\n\n    /**\n     * Gets the visible elements, sorts them, and passes them to layout.\n     * @param {Object} opts the options object for the sorted plugin\n     */\n\n  }, {\n    key: 'sort',\n    value: function sort() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.lastSort;\n\n      if (!this.isEnabled) {\n        return;\n      }\n\n      this._resetCols();\n\n      var items = this._getFilteredItems();\n      items = sorter(items, opts);\n\n      this._layout(items);\n\n      // `_layout` always happens after `_shrink`, so it's safe to process the style\n      // queue here with styles from the shrink method.\n      this._processQueue();\n\n      // Adjust the height of the container.\n      this._setContainerSize();\n\n      this.lastSort = opts;\n    }\n\n    /**\n     * Reposition everything.\n     * @param {boolean} isOnlyLayout If true, column and gutter widths won't be\n     *     recalculated.\n     */\n\n  }, {\n    key: 'update',\n    value: function update(isOnlyLayout) {\n      if (this.isEnabled) {\n        if (!isOnlyLayout) {\n          // Get updated colCount\n          this._setColumns();\n        }\n\n        // Layout items\n        this.sort();\n      }\n    }\n\n    /**\n     * Use this instead of `update()` if you don't need the columns and gutters updated\n     * Maybe an image inside `shuffle` loaded (and now has a height), which means calculations\n     * could be off.\n     */\n\n  }, {\n    key: 'layout',\n    value: function layout() {\n      this.update(true);\n    }\n\n    /**\n     * New items have been appended to shuffle. Mix them in with the current\n     * filter or sort status.\n     * @param {Array.<Element>} newItems Collection of new items.\n     */\n\n  }, {\n    key: 'add',\n    value: function add(newItems) {\n      var items = index$1(newItems).map(function (el) {\n        return new ShuffleItem(el);\n      });\n\n      // Add classes and set initial positions.\n      this._initItems(items);\n\n      // Add transition to each item.\n      this._setTransitions(items);\n\n      // Update the list of items.\n      this.items = this.items.concat(items);\n      this._updateItemsOrder();\n      this.filter(this.lastFilter);\n    }\n\n    /**\n     * Disables shuffle from updating dimensions and layout on resize\n     */\n\n  }, {\n    key: 'disable',\n    value: function disable() {\n      this.isEnabled = false;\n    }\n\n    /**\n     * Enables shuffle again\n     * @param {boolean} [isUpdateLayout=true] if undefined, shuffle will update columns and gutters\n     */\n\n  }, {\n    key: 'enable',\n    value: function enable(isUpdateLayout) {\n      this.isEnabled = true;\n      if (isUpdateLayout !== false) {\n        this.update();\n      }\n    }\n\n    /**\n     * Remove 1 or more shuffle items\n     * @param {Array.<Element>} elements An array containing one or more\n     *     elements in shuffle\n     * @return {Shuffle} The shuffle object\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(elements) {\n      var _this8 = this;\n\n      if (!elements.length) {\n        return;\n      }\n\n      var collection = index$1(elements);\n\n      var oldItems = collection.map(function (element) {\n        return _this8.getItemByElement(element);\n      }).filter(function (item) {\n        return !!item;\n      });\n\n      var handleLayout = function handleLayout() {\n        _this8.element.removeEventListener(Shuffle.EventType.LAYOUT, handleLayout);\n        _this8._disposeItems(oldItems);\n\n        // Remove the collection in the callback\n        collection.forEach(function (element) {\n          element.parentNode.removeChild(element);\n        });\n\n        _this8._dispatch(Shuffle.EventType.REMOVED, { collection: collection });\n      };\n\n      // Hide collection first.\n      this._toggleFilterClasses({\n        visible: [],\n        hidden: oldItems\n      });\n\n      this._shrink(oldItems);\n\n      this.sort();\n\n      // Update the list of items here because `remove` could be called again\n      // with an item that is in the process of being removed.\n      this.items = this.items.filter(function (item) {\n        return !arrayIncludes(oldItems, item);\n      });\n      this._updateItemCount();\n\n      this.element.addEventListener(Shuffle.EventType.LAYOUT, handleLayout);\n    }\n\n    /**\n     * Retrieve a shuffle item by its element.\n     * @param {Element} element Element to look for.\n     * @return {?ShuffleItem} A shuffle item or null if it's not found.\n     */\n\n  }, {\n    key: 'getItemByElement',\n    value: function getItemByElement(element) {\n      for (var i = this.items.length - 1; i >= 0; i--) {\n        if (this.items[i].element === element) {\n          return this.items[i];\n        }\n      }\n\n      return null;\n    }\n\n    /**\n     * Destroys shuffle, removes events, styles, and classes\n     */\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this._cancelMovement();\n      window.removeEventListener('resize', this._onResize);\n\n      // Reset container styles\n      this.element.classList.remove('shuffle');\n      this.element.removeAttribute('style');\n\n      // Reset individual item styles\n      this._disposeItems();\n\n      // Null DOM references\n      this.items = null;\n      this.options.sizer = null;\n      this.element = null;\n      this._transitions = null;\n\n      // Set a flag so if a debounced resize has been triggered,\n      // it can first check if it is actually isDestroyed and not doing anything\n      this.isDestroyed = true;\n    }\n\n    /**\n     * Returns the outer width of an element, optionally including its margins.\n     *\n     * There are a few different methods for getting the width of an element, none of\n     * which work perfectly for all Shuffle's use cases.\n     *\n     * 1. getBoundingClientRect() `left` and `right` properties.\n     *   - Accounts for transform scaled elements, making it useless for Shuffle\n     *   elements which have shrunk.\n     * 2. The `offsetWidth` property.\n     *   - This value stays the same regardless of the elements transform property,\n     *   however, it does not return subpixel values.\n     * 3. getComputedStyle()\n     *   - This works great Chrome, Firefox, Safari, but IE<=11 does not include\n     *   padding and border when box-sizing: border-box is set, requiring a feature\n     *   test and extra work to add the padding back for IE and other browsers which\n     *   follow the W3C spec here.\n     *\n     * @param {Element} element The element.\n     * @param {boolean} [includeMargins] Whether to include margins. Default is false.\n     * @return {{width: number, height: number}} The width and height.\n     */\n\n  }], [{\n    key: 'getSize',\n    value: function getSize(element, includeMargins) {\n      // Store the styles so that they can be used by others without asking for it again.\n      var styles = window.getComputedStyle(element, null);\n      var width = getNumberStyle(element, 'width', styles);\n      var height = getNumberStyle(element, 'height', styles);\n\n      if (includeMargins) {\n        var marginLeft = getNumberStyle(element, 'marginLeft', styles);\n        var marginRight = getNumberStyle(element, 'marginRight', styles);\n        var marginTop = getNumberStyle(element, 'marginTop', styles);\n        var marginBottom = getNumberStyle(element, 'marginBottom', styles);\n        width += marginLeft + marginRight;\n        height += marginTop + marginBottom;\n      }\n\n      return {\n        width: width,\n        height: height\n      };\n    }\n\n    /**\n     * Change a property or execute a function which will not have a transition\n     * @param {Array.<Element>} elements DOM elements that won't be transitioned.\n     * @param {Function} callback A function which will be called while transition\n     *     is set to 0ms.\n     * @private\n     */\n\n  }, {\n    key: '_skipTransitions',\n    value: function _skipTransitions(elements, callback) {\n      var zero = '0ms';\n\n      // Save current duration and delay.\n      var data = elements.map(function (element) {\n        var style = element.style;\n        var duration = style.transitionDuration;\n        var delay = style.transitionDelay;\n\n        // Set the duration to zero so it happens immediately\n        style.transitionDuration = zero;\n        style.transitionDelay = zero;\n\n        return {\n          duration: duration,\n          delay: delay\n        };\n      });\n\n      callback();\n\n      // Cause reflow.\n      elements[0].offsetWidth; // eslint-disable-line no-unused-expressions\n\n      // Put the duration back\n      elements.forEach(function (element, i) {\n        element.style.transitionDuration = data[i].duration;\n        element.style.transitionDelay = data[i].delay;\n      });\n    }\n  }]);\n  return Shuffle;\n}();\n\nShuffle.ShuffleItem = ShuffleItem;\n\nShuffle.ALL_ITEMS = 'all';\nShuffle.FILTER_ATTRIBUTE_KEY = 'groups';\n\n/**\n * @enum {string}\n */\nShuffle.EventType = {\n  LAYOUT: 'shuffle:layout',\n  REMOVED: 'shuffle:removed'\n};\n\n/** @enum {string} */\nShuffle.Classes = Classes;\n\n/**\n * @enum {string}\n */\nShuffle.FilterMode = {\n  ANY: 'any',\n  ALL: 'all'\n};\n\n// Overrideable options\nShuffle.options = {\n  // Initial filter group.\n  group: Shuffle.ALL_ITEMS,\n\n  // Transition/animation speed (milliseconds).\n  speed: 250,\n\n  // CSS easing function to use.\n  easing: 'ease',\n\n  // e.g. '.picture-item'.\n  itemSelector: '*',\n\n  // Element or selector string. Use an element to determine the size of columns\n  // and gutters.\n  sizer: null,\n\n  // A static number or function that tells the plugin how wide the gutters\n  // between columns are (in pixels).\n  gutterWidth: 0,\n\n  // A static number or function that returns a number which tells the plugin\n  // how wide the columns are (in pixels).\n  columnWidth: 0,\n\n  // If your group is not json, and is comma delimeted, you could set delimeter\n  // to ','.\n  delimeter: null,\n\n  // Useful for percentage based heights when they might not always be exactly\n  // the same (in pixels).\n  buffer: 0,\n\n  // Reading the width of elements isn't precise enough and can cause columns to\n  // jump between values.\n  columnThreshold: 0.01,\n\n  // Shuffle can be isInitialized with a sort object. It is the same object\n  // given to the sort method.\n  initialSort: null,\n\n  // By default, shuffle will throttle resize events. This can be changed or\n  // removed.\n  throttle: index$2,\n\n  // How often shuffle can be called on resize (in milliseconds).\n  throttleTime: 300,\n\n  // Transition delay offset for each item in milliseconds.\n  staggerAmount: 15,\n\n  // Maximum stagger delay in milliseconds.\n  staggerAmountMax: 250,\n\n  // Whether to use transforms or absolute positioning.\n  useTransforms: true,\n\n  // Affects using an array with filter. e.g. `filter(['one', 'two'])`. With \"any\",\n  // the element passes the test if any of its groups are in the array. With \"all\",\n  // the element only passes if all groups are in the array.\n  filterMode: Shuffle.FilterMode.ANY\n};\n\n// Expose for testing. Hack at your own risk.\nShuffle.__Point = Point;\nShuffle.__sorter = sorter;\nShuffle.__getColumnSpan = getColumnSpan;\nShuffle.__getAvailablePositions = getAvailablePositions;\nShuffle.__getShortColumn = getShortColumn;\n\nreturn Shuffle;\n\n})));\n//# sourceMappingURL=shuffle.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/shufflejs/dist/shuffle.js\n// module id = 4\n// module chunks = 0","import 'normalize.css';\nimport './../css/paraxify.css';\nimport './../styl/home.styl';\n\nimport './../js/paraxify';\nimport Shuffle from 'shufflejs';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    document.getElementById('mobile-menu').addEventListener('click', () => {\n        document.querySelector('header.header').classList.toggle('active');\n    });\n\n\n    const adjustVideo = () => {\n        const w = window.innerWidth;\n        if (w > 768 && top.offsetHeight > v.offsetHeight) {\n            const vRatio = (v.videoHeight - 20) / v.videoWidth;\n            top.style.height = (vRatio * w) + 'px';\n        }\n    }\n\n    const top = document.querySelector('.top');\n    const v = document.getElementsByTagName('video')[0];\n    if (v) {\n        v.addEventListener('loadeddata', () => {\n            adjustVideo();\n        });\n    }\n\n    paraxify('.paraxify');\n\n    const adjustProjectContainers = () => {\n        const w = window.innerWidth;\n        const containers = document.querySelectorAll('.project-container');\n        if (w > 868) {\n            containers.forEach((c) => {\n                c.style.height = (c.querySelector('.project_big img').clientHeight - 2) + 'px';\n            });\n        } else {\n            containers.forEach((c) => {\n                c.style.height = null;\n            });\n        }\n    };\n    adjustProjectContainers();\n\n\n    const grid = document.getElementById('grid');\n    if (grid) {\n        const shuffle = new Shuffle(grid, {\n          itemSelector: '.projects-content_item',\n          gutterWidth: 20,\n          columnWidth: (w) => {\n            let width = (w / 3) - 15;\n            if (w < 400) {\n                width = w;\n            } else if (w < 750) {\n                width = (w / 2) - 10;\n            }\n            document.querySelectorAll('.projects-content_item').forEach((item) => {\n                item.style.width = width + 'px';\n                item.style.height = width + 'px';\n            });\n            return width;\n          },\n        });\n        document.querySelectorAll('.project-filter-button').forEach((button) => {\n            button.addEventListener('click', (e) => {\n                e.target.classList.toggle('active');\n                shuffle.filter(e.target.id);\n            })\n        });\n    }\n\n    const onResize = () => {\n        adjustProjectContainers();\n        if (v) {\n            adjustVideo();\n        }\n    };\n    window.onresize = onResize;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./home/static/home/js/home.js\n// module id = 5\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}