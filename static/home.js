/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/static/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/MzY5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("// Generated by CoffeeScript 1.7.1\n\n/*\n Paraxify.js - v0.1\n @author Jaime Caballero\n MIT license\n */\n(function(document, window, index) {\n  \"use strict\";\n  var paraxify;\n  paraxify = function(el, options) {\n    var Paraxify, contador, i, opt, pho, posY, screenY;\n    posY = 0;\n    screenY = 0;\n    i = 0;\n    opt = {};\n    pho = [];\n    contador = 0;\n    Paraxify = function(el, options) {\n      this.options = {\n        speed: 1,\n        boost: 0\n      };\n      for (i in options) {\n        this.options[i] = options[i];\n      }\n      if (this.options.speed < 0 || this.options.speed > 1) {\n        this.options.speed = 1;\n      }\n      if (!el) {\n        el = 'paraxify';\n      }\n      if (document.getElementsByClassName(el.replace('.', ''))) {\n        this.photos = document.getElementsByClassName(el.replace('.', ''));\n      } else if (document.querySelector(el) !== false) {\n        this.photos = querySelector(el);\n      } else {\n        throw new Error(\"The elements you're trying to select don't exist.\");\n      }\n      opt = this.options;\n      pho = this.photos;\n      this._init(this);\n    };\n    Paraxify.prototype = {\n      update: function() {\n        screenY = window.innerHeight;\n        i = 0;\n        while (i < pho.length) {\n          pho[i].style.backgroundPosition = \"center center\";\n          pho[i].url = window.getComputedStyle(pho[i], false).backgroundImage.replace(/url\\((['\"])?(.*?)\\1\\)/gi, '$2').split(',')[0];\n          if (!pho[i].img) {\n            pho[i].img = new Image();\n          }\n          if (pho[i].url !== pho[i].img.src) {\n            this._check(i);\n            pho[i].img.src = pho[i].url;\n          }\n          i++;\n        }\n        this._animate();\n      },\n      _init: function() {\n        this.update();\n        window.onscroll = (function() {\n          this._animate();\n        }).bind(this);\n        window.onresize = (function() {\n          this.update();\n        }).bind(this);\n      },\n      _check: function(i) {\n        var actualHeight, main;\n        main = pho[i];\n        main.ok = true;\n        main.bgSize = window.getComputedStyle(main, false).backgroundSize;\n        actualHeight = screenY;\n        pho[i].img.onload = function() {\n          if (main.bgSize === '' || main.bgSize === 'auto') {\n            if (this.height < main.offsetHeight) {\n              main.ok = false;\n              throw new Error(\"The image \" + main.url + \" (\" + this.height + \"px) is too short for that container (\" + main.offsetHeight + \"px).\");\n            } else {\n              actualHeight = this.height;\n              if (this.height < screenY) {\n                actualHeight = actualHeight + ((screenY - main.offsetHeight) * opt.speed);\n              }\n            }\n          } else if (main.bgSize === 'cover') {\n            if (screenY < main.offsetHeight) {\n              main.ok = false;\n              throw new Error(\"The container (\" + main.offsetHeight + \"px) can't be bigger than the image (\" + screenY + \"px).\");\n            }\n          } else {\n            window.getComputedStyle(main, false).backgroundSize === 'cover';\n            this._check(i);\n          }\n          main.diff = -(actualHeight - main.offsetHeight) * opt.speed;\n          main.diff = main.diff - (main.offsetHeight * opt.boost);\n        };\n      },\n      _visible: function(i) {\n        if (((posY + screenY) > pho[i].offsetTop) && (posY < pho[i].offsetTop + pho[i].offsetHeight)) {\n          return true;\n        }\n        return false;\n      },\n      _animate: function() {\n        var per, position;\n        if (window.pageYOffset !== void 0) {\n          posY = window.pageYOffset;\n        } else {\n          posY = (document.documentElement || document.body.parentNode || document.body).scrollTop;\n        }\n        i = 0;\n        while (i < pho.length) {\n          this._check(i);\n          if (pho[i].ok && window.getComputedStyle(pho[i], false).backgroundAttachment === \"fixed\" && this._visible(i)) {\n            per = (posY - pho[i].offsetTop + screenY) / (pho[i].offsetHeight + screenY);\n            position = pho[i].diff * (per - 0.5);\n            if (pho[i].bgSize !== 'cover') {\n              position = position + ((screenY - pho[i].img.height) / 2);\n            }\n            position = Math.round(position * 100) / 100;\n          } else {\n            position = \"center\";\n          }\n          pho[i].style.backgroundPosition = \"center \" + position + \"px\";\n          i++;\n        }\n      }\n    };\n    return new Paraxify(el, options);\n  };\n  window.paraxify = paraxify;\n})(document, window, 0);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2hvbWUvc3RhdGljL2hvbWUvanMvcGFyYXhpZnkuanM/N2E3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuNy4xXG5cbi8qXG4gUGFyYXhpZnkuanMgLSB2MC4xXG4gQGF1dGhvciBKYWltZSBDYWJhbGxlcm9cbiBNSVQgbGljZW5zZVxuICovXG4oZnVuY3Rpb24oZG9jdW1lbnQsIHdpbmRvdywgaW5kZXgpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIHZhciBwYXJheGlmeTtcbiAgcGFyYXhpZnkgPSBmdW5jdGlvbihlbCwgb3B0aW9ucykge1xuICAgIHZhciBQYXJheGlmeSwgY29udGFkb3IsIGksIG9wdCwgcGhvLCBwb3NZLCBzY3JlZW5ZO1xuICAgIHBvc1kgPSAwO1xuICAgIHNjcmVlblkgPSAwO1xuICAgIGkgPSAwO1xuICAgIG9wdCA9IHt9O1xuICAgIHBobyA9IFtdO1xuICAgIGNvbnRhZG9yID0gMDtcbiAgICBQYXJheGlmeSA9IGZ1bmN0aW9uKGVsLCBvcHRpb25zKSB7XG4gICAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgIHNwZWVkOiAxLFxuICAgICAgICBib29zdDogMFxuICAgICAgfTtcbiAgICAgIGZvciAoaSBpbiBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9uc1tpXSA9IG9wdGlvbnNbaV07XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnNwZWVkIDwgMCB8fCB0aGlzLm9wdGlvbnMuc3BlZWQgPiAxKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5zcGVlZCA9IDE7XG4gICAgICB9XG4gICAgICBpZiAoIWVsKSB7XG4gICAgICAgIGVsID0gJ3BhcmF4aWZ5JztcbiAgICAgIH1cbiAgICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGVsLnJlcGxhY2UoJy4nLCAnJykpKSB7XG4gICAgICAgIHRoaXMucGhvdG9zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShlbC5yZXBsYWNlKCcuJywgJycpKTtcbiAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCkgIT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMucGhvdG9zID0gcXVlcnlTZWxlY3RvcihlbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZWxlbWVudHMgeW91J3JlIHRyeWluZyB0byBzZWxlY3QgZG9uJ3QgZXhpc3QuXCIpO1xuICAgICAgfVxuICAgICAgb3B0ID0gdGhpcy5vcHRpb25zO1xuICAgICAgcGhvID0gdGhpcy5waG90b3M7XG4gICAgICB0aGlzLl9pbml0KHRoaXMpO1xuICAgIH07XG4gICAgUGFyYXhpZnkucHJvdG90eXBlID0ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgc2NyZWVuWSA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgcGhvLmxlbmd0aCkge1xuICAgICAgICAgIHBob1tpXS5zdHlsZS5iYWNrZ3JvdW5kUG9zaXRpb24gPSBcImNlbnRlciBjZW50ZXJcIjtcbiAgICAgICAgICBwaG9baV0udXJsID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUocGhvW2ldLCBmYWxzZSkuYmFja2dyb3VuZEltYWdlLnJlcGxhY2UoL3VybFxcKChbJ1wiXSk/KC4qPylcXDFcXCkvZ2ksICckMicpLnNwbGl0KCcsJylbMF07XG4gICAgICAgICAgaWYgKCFwaG9baV0uaW1nKSB7XG4gICAgICAgICAgICBwaG9baV0uaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwaG9baV0udXJsICE9PSBwaG9baV0uaW1nLnNyYykge1xuICAgICAgICAgICAgdGhpcy5fY2hlY2soaSk7XG4gICAgICAgICAgICBwaG9baV0uaW1nLnNyYyA9IHBob1tpXS51cmw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hbmltYXRlKCk7XG4gICAgICB9LFxuICAgICAgX2luaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICB3aW5kb3cub25zY3JvbGwgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGhpcy5fYW5pbWF0ZSgpO1xuICAgICAgICB9KS5iaW5kKHRoaXMpO1xuICAgICAgICB3aW5kb3cub25yZXNpemUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgfSkuYmluZCh0aGlzKTtcbiAgICAgIH0sXG4gICAgICBfY2hlY2s6IGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgdmFyIGFjdHVhbEhlaWdodCwgbWFpbjtcbiAgICAgICAgbWFpbiA9IHBob1tpXTtcbiAgICAgICAgbWFpbi5vayA9IHRydWU7XG4gICAgICAgIG1haW4uYmdTaXplID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUobWFpbiwgZmFsc2UpLmJhY2tncm91bmRTaXplO1xuICAgICAgICBhY3R1YWxIZWlnaHQgPSBzY3JlZW5ZO1xuICAgICAgICBwaG9baV0uaW1nLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChtYWluLmJnU2l6ZSA9PT0gJycgfHwgbWFpbi5iZ1NpemUgPT09ICdhdXRvJykge1xuICAgICAgICAgICAgaWYgKHRoaXMuaGVpZ2h0IDwgbWFpbi5vZmZzZXRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgbWFpbi5vayA9IGZhbHNlO1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgaW1hZ2UgXCIgKyBtYWluLnVybCArIFwiIChcIiArIHRoaXMuaGVpZ2h0ICsgXCJweCkgaXMgdG9vIHNob3J0IGZvciB0aGF0IGNvbnRhaW5lciAoXCIgKyBtYWluLm9mZnNldEhlaWdodCArIFwicHgpLlwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGFjdHVhbEhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuICAgICAgICAgICAgICBpZiAodGhpcy5oZWlnaHQgPCBzY3JlZW5ZKSB7XG4gICAgICAgICAgICAgICAgYWN0dWFsSGVpZ2h0ID0gYWN0dWFsSGVpZ2h0ICsgKChzY3JlZW5ZIC0gbWFpbi5vZmZzZXRIZWlnaHQpICogb3B0LnNwZWVkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAobWFpbi5iZ1NpemUgPT09ICdjb3ZlcicpIHtcbiAgICAgICAgICAgIGlmIChzY3JlZW5ZIDwgbWFpbi5vZmZzZXRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgbWFpbi5vayA9IGZhbHNlO1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgY29udGFpbmVyIChcIiArIG1haW4ub2Zmc2V0SGVpZ2h0ICsgXCJweCkgY2FuJ3QgYmUgYmlnZ2VyIHRoYW4gdGhlIGltYWdlIChcIiArIHNjcmVlblkgKyBcInB4KS5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG1haW4sIGZhbHNlKS5iYWNrZ3JvdW5kU2l6ZSA9PT0gJ2NvdmVyJztcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrKGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtYWluLmRpZmYgPSAtKGFjdHVhbEhlaWdodCAtIG1haW4ub2Zmc2V0SGVpZ2h0KSAqIG9wdC5zcGVlZDtcbiAgICAgICAgICBtYWluLmRpZmYgPSBtYWluLmRpZmYgLSAobWFpbi5vZmZzZXRIZWlnaHQgKiBvcHQuYm9vc3QpO1xuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIF92aXNpYmxlOiBmdW5jdGlvbihpKSB7XG4gICAgICAgIGlmICgoKHBvc1kgKyBzY3JlZW5ZKSA+IHBob1tpXS5vZmZzZXRUb3ApICYmIChwb3NZIDwgcGhvW2ldLm9mZnNldFRvcCArIHBob1tpXS5vZmZzZXRIZWlnaHQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSxcbiAgICAgIF9hbmltYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHBlciwgcG9zaXRpb247XG4gICAgICAgIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgIT09IHZvaWQgMCkge1xuICAgICAgICAgIHBvc1kgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcG9zWSA9IChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfHwgZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlIHx8IGRvY3VtZW50LmJvZHkpLnNjcm9sbFRvcDtcbiAgICAgICAgfVxuICAgICAgICBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBwaG8ubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5fY2hlY2soaSk7XG4gICAgICAgICAgaWYgKHBob1tpXS5vayAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShwaG9baV0sIGZhbHNlKS5iYWNrZ3JvdW5kQXR0YWNobWVudCA9PT0gXCJmaXhlZFwiICYmIHRoaXMuX3Zpc2libGUoaSkpIHtcbiAgICAgICAgICAgIHBlciA9IChwb3NZIC0gcGhvW2ldLm9mZnNldFRvcCArIHNjcmVlblkpIC8gKHBob1tpXS5vZmZzZXRIZWlnaHQgKyBzY3JlZW5ZKTtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gcGhvW2ldLmRpZmYgKiAocGVyIC0gMC41KTtcbiAgICAgICAgICAgIGlmIChwaG9baV0uYmdTaXplICE9PSAnY292ZXInKSB7XG4gICAgICAgICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gKyAoKHNjcmVlblkgLSBwaG9baV0uaW1nLmhlaWdodCkgLyAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBvc2l0aW9uID0gTWF0aC5yb3VuZChwb3NpdGlvbiAqIDEwMCkgLyAxMDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gXCJjZW50ZXJcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGhvW2ldLnN0eWxlLmJhY2tncm91bmRQb3NpdGlvbiA9IFwiY2VudGVyIFwiICsgcG9zaXRpb24gKyBcInB4XCI7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gbmV3IFBhcmF4aWZ5KGVsLCBvcHRpb25zKTtcbiAgfTtcbiAgd2luZG93LnBhcmF4aWZ5ID0gcGFyYXhpZnk7XG59KShkb2N1bWVudCwgd2luZG93LCAwKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vaG9tZS9zdGF0aWMvaG9tZS9qcy9wYXJheGlmeS5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*! @vimeo/player v2.0.2 | (c) 2017 Vimeo | MIT License | https://github.com/vimeo/player.js */\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.Vimeo = global.Vimeo || {}, global.Vimeo.Player = factory());\n}(this, (function () { 'use strict';\n\nvar arrayIndexOfSupport = typeof Array.prototype.indexOf !== 'undefined';\nvar postMessageSupport = typeof window.postMessage !== 'undefined';\n\nif (!arrayIndexOfSupport || !postMessageSupport) {\n    throw new Error('Sorry, the Vimeo Player API is not available in this browser.');\n}\n\nvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n\n\n\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar index = createCommonjsModule(function (module, exports) {\n(function (exports) {\n  'use strict';\n  //shared pointer\n\n  var i;\n  //shortcuts\n  var defineProperty = Object.defineProperty,\n      is = function is(a, b) {\n    return a === b || a !== a && b !== b;\n  };\n\n  //Polyfill global objects\n  if (typeof WeakMap == 'undefined') {\n    exports.WeakMap = createCollection({\n      // WeakMap#delete(key:void*):boolean\n      'delete': sharedDelete,\n      // WeakMap#clear():\n      clear: sharedClear,\n      // WeakMap#get(key:void*):void*\n      get: sharedGet,\n      // WeakMap#has(key:void*):boolean\n      has: mapHas,\n      // WeakMap#set(key:void*, value:void*):void\n      set: sharedSet\n    }, true);\n  }\n\n  if (typeof Map == 'undefined' || typeof new Map().values !== 'function' || !new Map().values().next) {\n    exports.Map = createCollection({\n      // WeakMap#delete(key:void*):boolean\n      'delete': sharedDelete,\n      //:was Map#get(key:void*[, d3fault:void*]):void*\n      // Map#has(key:void*):boolean\n      has: mapHas,\n      // Map#get(key:void*):boolean\n      get: sharedGet,\n      // Map#set(key:void*, value:void*):void\n      set: sharedSet,\n      // Map#keys(void):Iterator\n      keys: sharedKeys,\n      // Map#values(void):Iterator\n      values: sharedValues,\n      // Map#entries(void):Iterator\n      entries: mapEntries,\n      // Map#forEach(callback:Function, context:void*):void ==> callback.call(context, key, value, mapObject) === not in specs`\n      forEach: sharedForEach,\n      // Map#clear():\n      clear: sharedClear\n    });\n  }\n\n  if (typeof Set == 'undefined' || typeof new Set().values !== 'function' || !new Set().values().next) {\n    exports.Set = createCollection({\n      // Set#has(value:void*):boolean\n      has: setHas,\n      // Set#add(value:void*):boolean\n      add: sharedAdd,\n      // Set#delete(key:void*):boolean\n      'delete': sharedDelete,\n      // Set#clear():\n      clear: sharedClear,\n      // Set#keys(void):Iterator\n      keys: sharedValues, // specs actually say \"the same function object as the initial value of the values property\"\n      // Set#values(void):Iterator\n      values: sharedValues,\n      // Set#entries(void):Iterator\n      entries: setEntries,\n      // Set#forEach(callback:Function, context:void*):void ==> callback.call(context, value, index) === not in specs\n      forEach: sharedForEach\n    });\n  }\n\n  if (typeof WeakSet == 'undefined') {\n    exports.WeakSet = createCollection({\n      // WeakSet#delete(key:void*):boolean\n      'delete': sharedDelete,\n      // WeakSet#add(value:void*):boolean\n      add: sharedAdd,\n      // WeakSet#clear():\n      clear: sharedClear,\n      // WeakSet#has(value:void*):boolean\n      has: setHas\n    }, true);\n  }\n\n  /**\n   * ES6 collection constructor\n   * @return {Function} a collection class\n   */\n  function createCollection(proto, objectOnly) {\n    function Collection(a) {\n      if (!this || this.constructor !== Collection) return new Collection(a);\n      this._keys = [];\n      this._values = [];\n      this._itp = []; // iteration pointers\n      this.objectOnly = objectOnly;\n\n      //parse initial iterable argument passed\n      if (a) init.call(this, a);\n    }\n\n    //define size for non object-only collections\n    if (!objectOnly) {\n      defineProperty(proto, 'size', {\n        get: sharedSize\n      });\n    }\n\n    //set prototype\n    proto.constructor = Collection;\n    Collection.prototype = proto;\n\n    return Collection;\n  }\n\n  /** parse initial iterable argument passed */\n  function init(a) {\n    var i;\n    //init Set argument, like `[1,2,3,{}]`\n    if (this.add) a.forEach(this.add, this);\n    //init Map argument like `[[1,2], [{}, 4]]`\n    else a.forEach(function (a) {\n        this.set(a[0], a[1]);\n      }, this);\n  }\n\n  /** delete */\n  function sharedDelete(key) {\n    if (this.has(key)) {\n      this._keys.splice(i, 1);\n      this._values.splice(i, 1);\n      // update iteration pointers\n      this._itp.forEach(function (p) {\n        if (i < p[0]) p[0]--;\n      });\n    }\n    // Aurora here does it while Canary doesn't\n    return -1 < i;\n  }\n\n  function sharedGet(key) {\n    return this.has(key) ? this._values[i] : undefined;\n  }\n\n  function has(list, key) {\n    if (this.objectOnly && key !== Object(key)) throw new TypeError(\"Invalid value used as weak collection key\");\n    //NaN or 0 passed\n    if (key != key || key === 0) for (i = list.length; i-- && !is(list[i], key);) {} else i = list.indexOf(key);\n    return -1 < i;\n  }\n\n  function setHas(value) {\n    return has.call(this, this._values, value);\n  }\n\n  function mapHas(value) {\n    return has.call(this, this._keys, value);\n  }\n\n  /** @chainable */\n  function sharedSet(key, value) {\n    this.has(key) ? this._values[i] = value : this._values[this._keys.push(key) - 1] = value;\n    return this;\n  }\n\n  /** @chainable */\n  function sharedAdd(value) {\n    if (!this.has(value)) this._values.push(value);\n    return this;\n  }\n\n  function sharedClear() {\n    (this._keys || 0).length = this._values.length = 0;\n  }\n\n  /** keys, values, and iterate related methods */\n  function sharedKeys() {\n    return sharedIterator(this._itp, this._keys);\n  }\n\n  function sharedValues() {\n    return sharedIterator(this._itp, this._values);\n  }\n\n  function mapEntries() {\n    return sharedIterator(this._itp, this._keys, this._values);\n  }\n\n  function setEntries() {\n    return sharedIterator(this._itp, this._values, this._values);\n  }\n\n  function sharedIterator(itp, array, array2) {\n    var p = [0],\n        done = false;\n    itp.push(p);\n    return {\n      next: function next() {\n        var v,\n            k = p[0];\n        if (!done && k < array.length) {\n          v = array2 ? [array[k], array2[k]] : array[k];\n          p[0]++;\n        } else {\n          done = true;\n          itp.splice(itp.indexOf(p), 1);\n        }\n        return { done: done, value: v };\n      }\n    };\n  }\n\n  function sharedSize() {\n    return this._values.length;\n  }\n\n  function sharedForEach(callback, context) {\n    var it = this.entries();\n    for (;;) {\n      var r = it.next();\n      if (r.done) break;\n      callback.call(context, r.value[1], r.value[0], this);\n    }\n  }\n})('object' != 'undefined' && typeof commonjsGlobal != 'undefined' ? commonjsGlobal : window);\n});\n\nvar npo_src = createCommonjsModule(function (module) {\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*! Native Promise Only\n    v0.8.1 (c) Kyle Simpson\n    MIT License: http://getify.mit-license.org\n*/\n\n(function UMD(name, context, definition) {\n\t// special form of UMD for polyfilling across evironments\n\tcontext[name] = context[name] || definition();\n\tif ('object' != \"undefined\" && module.exports) {\n\t\tmodule.exports = context[name];\n\t} else if (false) {\n\t\tundefined(function $AMD$() {\n\t\t\treturn context[name];\n\t\t});\n\t}\n})(\"Promise\", typeof commonjsGlobal != \"undefined\" ? commonjsGlobal : commonjsGlobal, function DEF() {\n\t/*jshint validthis:true */\n\t\"use strict\";\n\n\tvar builtInProp,\n\t    cycle,\n\t    scheduling_queue,\n\t    ToString = Object.prototype.toString,\n\t    timer = typeof setImmediate != \"undefined\" ? function timer(fn) {\n\t\treturn setImmediate(fn);\n\t} : setTimeout;\n\n\t// dammit, IE8.\n\ttry {\n\t\tObject.defineProperty({}, \"x\", {});\n\t\tbuiltInProp = function builtInProp(obj, name, val, config) {\n\t\t\treturn Object.defineProperty(obj, name, {\n\t\t\t\tvalue: val,\n\t\t\t\twritable: true,\n\t\t\t\tconfigurable: config !== false\n\t\t\t});\n\t\t};\n\t} catch (err) {\n\t\tbuiltInProp = function builtInProp(obj, name, val) {\n\t\t\tobj[name] = val;\n\t\t\treturn obj;\n\t\t};\n\t}\n\n\t// Note: using a queue instead of array for efficiency\n\tscheduling_queue = function Queue() {\n\t\tvar first, last, item;\n\n\t\tfunction Item(fn, self) {\n\t\t\tthis.fn = fn;\n\t\t\tthis.self = self;\n\t\t\tthis.next = void 0;\n\t\t}\n\n\t\treturn {\n\t\t\tadd: function add(fn, self) {\n\t\t\t\titem = new Item(fn, self);\n\t\t\t\tif (last) {\n\t\t\t\t\tlast.next = item;\n\t\t\t\t} else {\n\t\t\t\t\tfirst = item;\n\t\t\t\t}\n\t\t\t\tlast = item;\n\t\t\t\titem = void 0;\n\t\t\t},\n\t\t\tdrain: function drain() {\n\t\t\t\tvar f = first;\n\t\t\t\tfirst = last = cycle = void 0;\n\n\t\t\t\twhile (f) {\n\t\t\t\t\tf.fn.call(f.self);\n\t\t\t\t\tf = f.next;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}();\n\n\tfunction schedule(fn, self) {\n\t\tscheduling_queue.add(fn, self);\n\t\tif (!cycle) {\n\t\t\tcycle = timer(scheduling_queue.drain);\n\t\t}\n\t}\n\n\t// promise duck typing\n\tfunction isThenable(o) {\n\t\tvar _then,\n\t\t    o_type = typeof o === \"undefined\" ? \"undefined\" : _typeof(o);\n\n\t\tif (o != null && (o_type == \"object\" || o_type == \"function\")) {\n\t\t\t_then = o.then;\n\t\t}\n\t\treturn typeof _then == \"function\" ? _then : false;\n\t}\n\n\tfunction notify() {\n\t\tfor (var i = 0; i < this.chain.length; i++) {\n\t\t\tnotifyIsolated(this, this.state === 1 ? this.chain[i].success : this.chain[i].failure, this.chain[i]);\n\t\t}\n\t\tthis.chain.length = 0;\n\t}\n\n\t// NOTE: This is a separate function to isolate\n\t// the `try..catch` so that other code can be\n\t// optimized better\n\tfunction notifyIsolated(self, cb, chain) {\n\t\tvar ret, _then;\n\t\ttry {\n\t\t\tif (cb === false) {\n\t\t\t\tchain.reject(self.msg);\n\t\t\t} else {\n\t\t\t\tif (cb === true) {\n\t\t\t\t\tret = self.msg;\n\t\t\t\t} else {\n\t\t\t\t\tret = cb.call(void 0, self.msg);\n\t\t\t\t}\n\n\t\t\t\tif (ret === chain.promise) {\n\t\t\t\t\tchain.reject(TypeError(\"Promise-chain cycle\"));\n\t\t\t\t} else if (_then = isThenable(ret)) {\n\t\t\t\t\t_then.call(ret, chain.resolve, chain.reject);\n\t\t\t\t} else {\n\t\t\t\t\tchain.resolve(ret);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tchain.reject(err);\n\t\t}\n\t}\n\n\tfunction resolve(msg) {\n\t\tvar _then,\n\t\t    self = this;\n\n\t\t// already triggered?\n\t\tif (self.triggered) {\n\t\t\treturn;\n\t\t}\n\n\t\tself.triggered = true;\n\n\t\t// unwrap\n\t\tif (self.def) {\n\t\t\tself = self.def;\n\t\t}\n\n\t\ttry {\n\t\t\tif (_then = isThenable(msg)) {\n\t\t\t\tschedule(function () {\n\t\t\t\t\tvar def_wrapper = new MakeDefWrapper(self);\n\t\t\t\t\ttry {\n\t\t\t\t\t\t_then.call(msg, function $resolve$() {\n\t\t\t\t\t\t\tresolve.apply(def_wrapper, arguments);\n\t\t\t\t\t\t}, function $reject$() {\n\t\t\t\t\t\t\treject.apply(def_wrapper, arguments);\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\treject.call(def_wrapper, err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tself.msg = msg;\n\t\t\t\tself.state = 1;\n\t\t\t\tif (self.chain.length > 0) {\n\t\t\t\t\tschedule(notify, self);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\treject.call(new MakeDefWrapper(self), err);\n\t\t}\n\t}\n\n\tfunction reject(msg) {\n\t\tvar self = this;\n\n\t\t// already triggered?\n\t\tif (self.triggered) {\n\t\t\treturn;\n\t\t}\n\n\t\tself.triggered = true;\n\n\t\t// unwrap\n\t\tif (self.def) {\n\t\t\tself = self.def;\n\t\t}\n\n\t\tself.msg = msg;\n\t\tself.state = 2;\n\t\tif (self.chain.length > 0) {\n\t\t\tschedule(notify, self);\n\t\t}\n\t}\n\n\tfunction iteratePromises(Constructor, arr, resolver, rejecter) {\n\t\tfor (var idx = 0; idx < arr.length; idx++) {\n\t\t\t(function IIFE(idx) {\n\t\t\t\tConstructor.resolve(arr[idx]).then(function $resolver$(msg) {\n\t\t\t\t\tresolver(idx, msg);\n\t\t\t\t}, rejecter);\n\t\t\t})(idx);\n\t\t}\n\t}\n\n\tfunction MakeDefWrapper(self) {\n\t\tthis.def = self;\n\t\tthis.triggered = false;\n\t}\n\n\tfunction MakeDef(self) {\n\t\tthis.promise = self;\n\t\tthis.state = 0;\n\t\tthis.triggered = false;\n\t\tthis.chain = [];\n\t\tthis.msg = void 0;\n\t}\n\n\tfunction Promise(executor) {\n\t\tif (typeof executor != \"function\") {\n\t\t\tthrow TypeError(\"Not a function\");\n\t\t}\n\n\t\tif (this.__NPO__ !== 0) {\n\t\t\tthrow TypeError(\"Not a promise\");\n\t\t}\n\n\t\t// instance shadowing the inherited \"brand\"\n\t\t// to signal an already \"initialized\" promise\n\t\tthis.__NPO__ = 1;\n\n\t\tvar def = new MakeDef(this);\n\n\t\tthis[\"then\"] = function then(success, failure) {\n\t\t\tvar o = {\n\t\t\t\tsuccess: typeof success == \"function\" ? success : true,\n\t\t\t\tfailure: typeof failure == \"function\" ? failure : false\n\t\t\t};\n\t\t\t// Note: `then(..)` itself can be borrowed to be used against\n\t\t\t// a different promise constructor for making the chained promise,\n\t\t\t// by substituting a different `this` binding.\n\t\t\to.promise = new this.constructor(function extractChain(resolve, reject) {\n\t\t\t\tif (typeof resolve != \"function\" || typeof reject != \"function\") {\n\t\t\t\t\tthrow TypeError(\"Not a function\");\n\t\t\t\t}\n\n\t\t\t\to.resolve = resolve;\n\t\t\t\to.reject = reject;\n\t\t\t});\n\t\t\tdef.chain.push(o);\n\n\t\t\tif (def.state !== 0) {\n\t\t\t\tschedule(notify, def);\n\t\t\t}\n\n\t\t\treturn o.promise;\n\t\t};\n\t\tthis[\"catch\"] = function $catch$(failure) {\n\t\t\treturn this.then(void 0, failure);\n\t\t};\n\n\t\ttry {\n\t\t\texecutor.call(void 0, function publicResolve(msg) {\n\t\t\t\tresolve.call(def, msg);\n\t\t\t}, function publicReject(msg) {\n\t\t\t\treject.call(def, msg);\n\t\t\t});\n\t\t} catch (err) {\n\t\t\treject.call(def, err);\n\t\t}\n\t}\n\n\tvar PromisePrototype = builtInProp({}, \"constructor\", Promise,\n\t/*configurable=*/false);\n\n\t// Note: Android 4 cannot use `Object.defineProperty(..)` here\n\tPromise.prototype = PromisePrototype;\n\n\t// built-in \"brand\" to signal an \"uninitialized\" promise\n\tbuiltInProp(PromisePrototype, \"__NPO__\", 0,\n\t/*configurable=*/false);\n\n\tbuiltInProp(Promise, \"resolve\", function Promise$resolve(msg) {\n\t\tvar Constructor = this;\n\n\t\t// spec mandated checks\n\t\t// note: best \"isPromise\" check that's practical for now\n\t\tif (msg && (typeof msg === \"undefined\" ? \"undefined\" : _typeof(msg)) == \"object\" && msg.__NPO__ === 1) {\n\t\t\treturn msg;\n\t\t}\n\n\t\treturn new Constructor(function executor(resolve, reject) {\n\t\t\tif (typeof resolve != \"function\" || typeof reject != \"function\") {\n\t\t\t\tthrow TypeError(\"Not a function\");\n\t\t\t}\n\n\t\t\tresolve(msg);\n\t\t});\n\t});\n\n\tbuiltInProp(Promise, \"reject\", function Promise$reject(msg) {\n\t\treturn new this(function executor(resolve, reject) {\n\t\t\tif (typeof resolve != \"function\" || typeof reject != \"function\") {\n\t\t\t\tthrow TypeError(\"Not a function\");\n\t\t\t}\n\n\t\t\treject(msg);\n\t\t});\n\t});\n\n\tbuiltInProp(Promise, \"all\", function Promise$all(arr) {\n\t\tvar Constructor = this;\n\n\t\t// spec mandated checks\n\t\tif (ToString.call(arr) != \"[object Array]\") {\n\t\t\treturn Constructor.reject(TypeError(\"Not an array\"));\n\t\t}\n\t\tif (arr.length === 0) {\n\t\t\treturn Constructor.resolve([]);\n\t\t}\n\n\t\treturn new Constructor(function executor(resolve, reject) {\n\t\t\tif (typeof resolve != \"function\" || typeof reject != \"function\") {\n\t\t\t\tthrow TypeError(\"Not a function\");\n\t\t\t}\n\n\t\t\tvar len = arr.length,\n\t\t\t    msgs = Array(len),\n\t\t\t    count = 0;\n\n\t\t\titeratePromises(Constructor, arr, function resolver(idx, msg) {\n\t\t\t\tmsgs[idx] = msg;\n\t\t\t\tif (++count === len) {\n\t\t\t\t\tresolve(msgs);\n\t\t\t\t}\n\t\t\t}, reject);\n\t\t});\n\t});\n\n\tbuiltInProp(Promise, \"race\", function Promise$race(arr) {\n\t\tvar Constructor = this;\n\n\t\t// spec mandated checks\n\t\tif (ToString.call(arr) != \"[object Array]\") {\n\t\t\treturn Constructor.reject(TypeError(\"Not an array\"));\n\t\t}\n\n\t\treturn new Constructor(function executor(resolve, reject) {\n\t\t\tif (typeof resolve != \"function\" || typeof reject != \"function\") {\n\t\t\t\tthrow TypeError(\"Not a function\");\n\t\t\t}\n\n\t\t\titeratePromises(Constructor, arr, function resolver(idx, msg) {\n\t\t\t\tresolve(msg);\n\t\t\t}, reject);\n\t\t});\n\t});\n\n\treturn Promise;\n});\n});\n\n/**\n * @module lib/callbacks\n */\n\nvar callbackMap = new WeakMap();\n\n/**\n * Store a callback for a method or event for a player.\n *\n * @author Brad Dougherty <brad@vimeo.com>\n * @param {Player} player The player object.\n * @param {string} name The method or event name.\n * @param {(function(this:Player, *): void|{resolve: function, reject: function})} callback\n *        The callback to call or an object with resolve and reject functions for a promise.\n * @return {void}\n */\nfunction storeCallback(player, name, callback) {\n    var playerCallbacks = callbackMap.get(player.element) || {};\n\n    if (!(name in playerCallbacks)) {\n        playerCallbacks[name] = [];\n    }\n\n    playerCallbacks[name].push(callback);\n    callbackMap.set(player.element, playerCallbacks);\n}\n\n/**\n * Get the callbacks for a player and event or method.\n *\n * @author Brad Dougherty <brad@vimeo.com>\n * @param {Player} player The player object.\n * @param {string} name The method or event name\n * @return {function[]}\n */\nfunction getCallbacks(player, name) {\n    var playerCallbacks = callbackMap.get(player.element) || {};\n    return playerCallbacks[name] || [];\n}\n\n/**\n * Remove a stored callback for a method or event for a player.\n *\n * @author Brad Dougherty <brad@vimeo.com>\n * @param {Player} player The player object.\n * @param {string} name The method or event name\n * @param {function} [callback] The specific callback to remove.\n * @return {boolean} Was this the last callback?\n */\nfunction removeCallback(player, name, callback) {\n    var playerCallbacks = callbackMap.get(player.element) || {};\n\n    if (!playerCallbacks[name]) {\n        return true;\n    }\n\n    // If no callback is passed, remove all callbacks for the event\n    if (!callback) {\n        playerCallbacks[name] = [];\n        callbackMap.set(player.element, playerCallbacks);\n\n        return true;\n    }\n\n    var index = playerCallbacks[name].indexOf(callback);\n\n    if (index !== -1) {\n        playerCallbacks[name].splice(index, 1);\n    }\n\n    callbackMap.set(player.element, playerCallbacks);\n    return playerCallbacks[name] && playerCallbacks[name].length === 0;\n}\n\n/**\n * Return the first stored callback for a player and event or method.\n *\n * @param {Player} player The player object.\n * @param {string} name The method or event name.\n * @return {function} The callback, or false if there were none\n */\nfunction shiftCallbacks(player, name) {\n    var playerCallbacks = getCallbacks(player, name);\n\n    if (playerCallbacks.length < 1) {\n        return false;\n    }\n\n    var callback = playerCallbacks.shift();\n    removeCallback(player, name, callback);\n    return callback;\n}\n\n/**\n * Move callbacks associated with an element to another element.\n *\n * @author Brad Dougherty <brad@vimeo.com>\n * @param {HTMLElement} oldElement The old element.\n * @param {HTMLElement} newElement The new element.\n * @return {void}\n */\nfunction swapCallbacks(oldElement, newElement) {\n    var playerCallbacks = callbackMap.get(oldElement);\n\n    callbackMap.set(newElement, playerCallbacks);\n    callbackMap.delete(oldElement);\n}\n\n/**\n * @module lib/functions\n */\n\n/**\n * Get the name of the method for a given getter or setter.\n *\n * @author Brad Dougherty <brad@vimeo.com>\n * @param {string} prop The name of the property.\n * @param {string} type Either “get” or “set”.\n * @return {string}\n */\nfunction getMethodName(prop, type) {\n    if (prop.indexOf(type.toLowerCase()) === 0) {\n        return prop;\n    }\n\n    return '' + type.toLowerCase() + prop.substr(0, 1).toUpperCase() + prop.substr(1);\n}\n\n/**\n * Check to see if the object is a DOM Element.\n *\n * @author Brad Dougherty <brad@vimeo.com>\n * @param {*} element The object to check.\n * @return {boolean}\n */\nfunction isDomElement(element) {\n    return element instanceof window.HTMLElement;\n}\n\n/**\n * Check to see whether the value is a number.\n *\n * @author Brad Dougherty <brad@vimeo.com>\n * @see http://dl.dropboxusercontent.com/u/35146/js/tests/isNumber.html\n * @param {*} value The value to check.\n * @param {boolean} integer Check if the value is an integer.\n * @return {boolean}\n */\nfunction isInteger(value) {\n    // eslint-disable-next-line eqeqeq\n    return !isNaN(parseFloat(value)) && isFinite(value) && Math.floor(value) == value;\n}\n\n/**\n * Check to see if the URL is a Vimeo url.\n *\n * @author Brad Dougherty <brad@vimeo.com>\n * @param {string} url The url string.\n * @return {boolean}\n */\nfunction isVimeoUrl(url) {\n    return (/^(https?:)?\\/\\/((player|www).)?vimeo.com(?=$|\\/)/.test(url)\n    );\n}\n\n/**\n * Get the Vimeo URL from an element.\n * The element must have either a data-vimeo-id or data-vimeo-url attribute.\n *\n * @author Brad Dougherty <brad@vimeo.com>\n * @param {object} oEmbedParameters The oEmbed parameters.\n * @return {string}\n */\nfunction getVimeoUrl() {\n    var oEmbedParameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var id = oEmbedParameters.id;\n    var url = oEmbedParameters.url;\n    var idOrUrl = id || url;\n\n    if (!idOrUrl) {\n        throw new Error('An id or url must be passed, either in an options object or as a data-vimeo-id or data-vimeo-url attribute.');\n    }\n\n    if (isInteger(idOrUrl)) {\n        return 'https://vimeo.com/' + idOrUrl;\n    }\n\n    if (isVimeoUrl(idOrUrl)) {\n        return idOrUrl.replace('http:', 'https:');\n    }\n\n    if (id) {\n        throw new TypeError('\\u201C' + id + '\\u201D is not a valid video id.');\n    }\n\n    throw new TypeError('\\u201C' + idOrUrl + '\\u201D is not a vimeo.com url.');\n}\n\n/**\n * @module lib/embed\n */\n\nvar oEmbedParameters = ['id', 'url', 'width', 'maxwidth', 'height', 'maxheight', 'portrait', 'title', 'byline', 'color', 'autoplay', 'autopause', 'loop', 'responsive'];\n\n/**\n * Get the 'data-vimeo'-prefixed attributes from an element as an object.\n *\n * @author Brad Dougherty <brad@vimeo.com>\n * @param {HTMLElement} element The element.\n * @param {Object} [defaults={}] The default values to use.\n * @return {Object<string, string>}\n */\nfunction getOEmbedParameters(element) {\n    var defaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    return oEmbedParameters.reduce(function (params, param) {\n        var value = element.getAttribute('data-vimeo-' + param);\n\n        if (value || value === '') {\n            params[param] = value === '' ? 1 : value;\n        }\n\n        return params;\n    }, defaults);\n}\n\n/**\n * Make an oEmbed call for the specified URL.\n *\n * @author Brad Dougherty <brad@vimeo.com>\n * @param {string} videoUrl The vimeo.com url for the video.\n * @param {Object} [params] Parameters to pass to oEmbed.\n * @return {Promise}\n */\nfunction getOEmbedData(videoUrl) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    return new Promise(function (resolve, reject) {\n        if (!isVimeoUrl(videoUrl)) {\n            throw new TypeError('\\u201C' + videoUrl + '\\u201D is not a vimeo.com url.');\n        }\n\n        var url = 'https://vimeo.com/api/oembed.json?url=' + encodeURIComponent(videoUrl);\n\n        for (var param in params) {\n            if (params.hasOwnProperty(param)) {\n                url += '&' + param + '=' + encodeURIComponent(params[param]);\n            }\n        }\n\n        var xhr = 'XDomainRequest' in window ? new XDomainRequest() : new XMLHttpRequest();\n        xhr.open('GET', url, true);\n\n        xhr.onload = function () {\n            if (xhr.status === 404) {\n                reject(new Error('\\u201C' + videoUrl + '\\u201D was not found.'));\n                return;\n            }\n\n            if (xhr.status === 403) {\n                reject(new Error('\\u201C' + videoUrl + '\\u201D is not embeddable.'));\n                return;\n            }\n\n            try {\n                var json = JSON.parse(xhr.responseText);\n                resolve(json);\n            } catch (error) {\n                reject(error);\n            }\n        };\n\n        xhr.onerror = function () {\n            var status = xhr.status ? ' (' + xhr.status + ')' : '';\n            reject(new Error('There was an error fetching the embed code from Vimeo' + status + '.'));\n        };\n\n        xhr.send();\n    });\n}\n\n/**\n * Create an embed from oEmbed data inside an element.\n *\n * @author Brad Dougherty <brad@vimeo.com>\n * @param {object} data The oEmbed data.\n * @param {HTMLElement} element The element to put the iframe in.\n * @return {HTMLIFrameElement} The iframe embed.\n */\nfunction createEmbed(_ref, element) {\n    var html = _ref.html;\n\n    if (!element) {\n        throw new TypeError('An element must be provided');\n    }\n\n    if (element.getAttribute('data-vimeo-initialized') !== null) {\n        return element.querySelector('iframe');\n    }\n\n    var div = document.createElement('div');\n    div.innerHTML = html;\n\n    element.appendChild(div.firstChild);\n    element.setAttribute('data-vimeo-initialized', 'true');\n\n    return element.querySelector('iframe');\n}\n\n/**\n * Initialize all embeds within a specific element\n *\n * @author Brad Dougherty <brad@vimeo.com>\n * @param {HTMLElement} [parent=document] The parent element.\n * @return {void}\n */\nfunction initializeEmbeds() {\n    var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\n    var elements = [].slice.call(parent.querySelectorAll('[data-vimeo-id], [data-vimeo-url]'));\n\n    var handleError = function handleError(error) {\n        if ('console' in window && console.error) {\n            console.error('There was an error creating an embed: ' + error);\n        }\n    };\n\n    elements.forEach(function (element) {\n        try {\n            // Skip any that have data-vimeo-defer\n            if (element.getAttribute('data-vimeo-defer') !== null) {\n                return;\n            }\n\n            var params = getOEmbedParameters(element);\n            var url = getVimeoUrl(params);\n\n            getOEmbedData(url, params).then(function (data) {\n                return createEmbed(data, element);\n            }).catch(handleError);\n        } catch (error) {\n            handleError(error);\n        }\n    });\n}\n\n/**\n * @module lib/postmessage\n */\n\n/**\n * Parse a message received from postMessage.\n *\n * @param {*} data The data received from postMessage.\n * @return {object}\n */\nfunction parseMessageData(data) {\n    if (typeof data === 'string') {\n        data = JSON.parse(data);\n    }\n\n    return data;\n}\n\n/**\n * Post a message to the specified target.\n *\n * @author Brad Dougherty <brad@vimeo.com>\n * @param {Player} player The player object to use.\n * @param {string} method The API method to call.\n * @param {object} params The parameters to send to the player.\n * @return {void}\n */\nfunction postMessage(player, method, params) {\n    if (!player.element.contentWindow || !player.element.contentWindow.postMessage) {\n        return;\n    }\n\n    var message = {\n        method: method\n    };\n\n    if (params !== undefined) {\n        message.value = params;\n    }\n\n    // IE 8 and 9 do not support passing messages, so stringify them\n    var ieVersion = parseFloat(navigator.userAgent.toLowerCase().replace(/^.*msie (\\d+).*$/, '$1'));\n    if (ieVersion >= 8 && ieVersion < 10) {\n        message = JSON.stringify(message);\n    }\n\n    player.element.contentWindow.postMessage(message, player.origin);\n}\n\n/**\n * Parse the data received from a message event.\n *\n * @author Brad Dougherty <brad@vimeo.com>\n * @param {Player} player The player that received the message.\n * @param {(Object|string)} data The message data. Strings will be parsed into JSON.\n * @return {void}\n */\nfunction processData(player, data) {\n    data = parseMessageData(data);\n    var callbacks = [];\n    var param = void 0;\n\n    if (data.event) {\n        if (data.event === 'error') {\n            var promises = getCallbacks(player, data.data.method);\n\n            promises.forEach(function (promise) {\n                var error = new Error(data.data.message);\n                error.name = data.data.name;\n\n                promise.reject(error);\n                removeCallback(player, data.data.method, promise);\n            });\n        }\n\n        callbacks = getCallbacks(player, 'event:' + data.event);\n        param = data.data;\n    } else if (data.method) {\n        var callback = shiftCallbacks(player, data.method);\n\n        if (callback) {\n            callbacks.push(callback);\n            param = data.value;\n        }\n    }\n\n    callbacks.forEach(function (callback) {\n        try {\n            if (typeof callback === 'function') {\n                callback.call(player, param);\n                return;\n            }\n\n            callback.resolve(param);\n        } catch (e) {\n            // empty\n        }\n    });\n}\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar playerMap = new WeakMap();\nvar readyMap = new WeakMap();\n\nvar Player = function () {\n    /**\n    * Create a Player.\n    *\n    * @author Brad Dougherty <brad@vimeo.com>\n    * @param {(HTMLIFrameElement|HTMLElement|string|jQuery)} element A reference to the Vimeo\n    *        player iframe, and id, or a jQuery object.\n    * @param {object} [options] oEmbed parameters to use when creating an embed in the element.\n    * @return {Player}\n    */\n    function Player(element) {\n        var _this = this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        _classCallCheck(this, Player);\n\n        /* global jQuery */\n        if (window.jQuery && element instanceof jQuery) {\n            if (element.length > 1 && window.console && console.warn) {\n                console.warn('A jQuery object with multiple elements was passed, using the first element.');\n            }\n\n            element = element[0];\n        }\n\n        // Find an element by ID\n        if (typeof element === 'string') {\n            element = document.getElementById(element);\n        }\n\n        // Not an element!\n        if (!isDomElement(element)) {\n            throw new TypeError('You must pass either a valid element or a valid id.');\n        }\n\n        // Already initialized an embed in this div, so grab the iframe\n        if (element.nodeName !== 'IFRAME') {\n            var iframe = element.querySelector('iframe');\n\n            if (iframe) {\n                element = iframe;\n            }\n        }\n\n        // iframe url is not a Vimeo url\n        if (element.nodeName === 'IFRAME' && !isVimeoUrl(element.getAttribute('src') || '')) {\n            throw new Error('The player element passed isn’t a Vimeo embed.');\n        }\n\n        // If there is already a player object in the map, return that\n        if (playerMap.has(element)) {\n            return playerMap.get(element);\n        }\n\n        this.element = element;\n        this.origin = '*';\n\n        var readyPromise = new npo_src(function (resolve, reject) {\n            var onMessage = function onMessage(event) {\n                if (!isVimeoUrl(event.origin) || _this.element.contentWindow !== event.source) {\n                    return;\n                }\n\n                if (_this.origin === '*') {\n                    _this.origin = event.origin;\n                }\n\n                var data = parseMessageData(event.data);\n                var isReadyEvent = 'event' in data && data.event === 'ready';\n                var isPingResponse = 'method' in data && data.method === 'ping';\n\n                if (isReadyEvent || isPingResponse) {\n                    _this.element.setAttribute('data-ready', 'true');\n                    resolve();\n                    return;\n                }\n\n                processData(_this, data);\n            };\n\n            if (window.addEventListener) {\n                window.addEventListener('message', onMessage, false);\n            } else if (window.attachEvent) {\n                window.attachEvent('onmessage', onMessage);\n            }\n\n            if (_this.element.nodeName !== 'IFRAME') {\n                var params = getOEmbedParameters(element, options);\n                var url = getVimeoUrl(params);\n\n                getOEmbedData(url, params).then(function (data) {\n                    var iframe = createEmbed(data, element);\n                    _this.element = iframe;\n\n                    swapCallbacks(element, iframe);\n                    playerMap.set(_this.element, _this);\n\n                    return data;\n                }).catch(function (error) {\n                    return reject(error);\n                });\n            }\n        });\n\n        // Store a copy of this Player in the map\n        readyMap.set(this, readyPromise);\n        playerMap.set(this.element, this);\n\n        // Send a ping to the iframe so the ready promise will be resolved if\n        // the player is already ready.\n        if (this.element.nodeName === 'IFRAME') {\n            postMessage(this, 'ping');\n        }\n\n        return this;\n    }\n\n    /**\n     * Get a promise for a method.\n     *\n     * @author Brad Dougherty <brad@vimeo.com>\n     * @param {string} name The API method to call.\n     * @param {Object} [args={}] Arguments to send via postMessage.\n     * @return {Promise}\n     */\n\n\n    _createClass(Player, [{\n        key: 'callMethod',\n        value: function callMethod(name) {\n            var _this2 = this;\n\n            var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            return new npo_src(function (resolve, reject) {\n                // We are storing the resolve/reject handlers to call later, so we\n                // can’t return here.\n                // eslint-disable-next-line promise/always-return\n                return _this2.ready().then(function () {\n                    storeCallback(_this2, name, {\n                        resolve: resolve,\n                        reject: reject\n                    });\n\n                    postMessage(_this2, name, args);\n                });\n            });\n        }\n\n        /**\n         * Get a promise for the value of a player property.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @param {string} name The property name\n         * @return {Promise}\n         */\n\n    }, {\n        key: 'get',\n        value: function get(name) {\n            var _this3 = this;\n\n            return new npo_src(function (resolve, reject) {\n                name = getMethodName(name, 'get');\n\n                // We are storing the resolve/reject handlers to call later, so we\n                // can’t return here.\n                // eslint-disable-next-line promise/always-return\n                return _this3.ready().then(function () {\n                    storeCallback(_this3, name, {\n                        resolve: resolve,\n                        reject: reject\n                    });\n\n                    postMessage(_this3, name);\n                });\n            });\n        }\n\n        /**\n         * Get a promise for setting the value of a player property.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @param {string} name The API method to call.\n         * @param {mixed} value The value to set.\n         * @return {Promise}\n         */\n\n    }, {\n        key: 'set',\n        value: function set(name, value) {\n            var _this4 = this;\n\n            return npo_src.resolve(value).then(function (val) {\n                name = getMethodName(name, 'set');\n\n                if (val === undefined || val === null) {\n                    throw new TypeError('There must be a value to set.');\n                }\n\n                return _this4.ready().then(function () {\n                    return new npo_src(function (resolve, reject) {\n                        storeCallback(_this4, name, {\n                            resolve: resolve,\n                            reject: reject\n                        });\n\n                        postMessage(_this4, name, val);\n                    });\n                });\n            });\n        }\n\n        /**\n         * Add an event listener for the specified event. Will call the\n         * callback with a single parameter, `data`, that contains the data for\n         * that event.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @param {string} eventName The name of the event.\n         * @param {function(*)} callback The function to call when the event fires.\n         * @return {void}\n         */\n\n    }, {\n        key: 'on',\n        value: function on(eventName, callback) {\n            if (!eventName) {\n                throw new TypeError('You must pass an event name.');\n            }\n\n            if (!callback) {\n                throw new TypeError('You must pass a callback function.');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError('The callback must be a function.');\n            }\n\n            var callbacks = getCallbacks(this, 'event:' + eventName);\n            if (callbacks.length === 0) {\n                this.callMethod('addEventListener', eventName).catch(function () {\n                    // Ignore the error. There will be an error event fired that\n                    // will trigger the error callback if they are listening.\n                });\n            }\n\n            storeCallback(this, 'event:' + eventName, callback);\n        }\n\n        /**\n         * Remove an event listener for the specified event. Will remove all\n         * listeners for that event if a `callback` isn’t passed, or only that\n         * specific callback if it is passed.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @param {string} eventName The name of the event.\n         * @param {function} [callback] The specific callback to remove.\n         * @return {void}\n         */\n\n    }, {\n        key: 'off',\n        value: function off(eventName, callback) {\n            if (!eventName) {\n                throw new TypeError('You must pass an event name.');\n            }\n\n            if (callback && typeof callback !== 'function') {\n                throw new TypeError('The callback must be a function.');\n            }\n\n            var lastCallback = removeCallback(this, 'event:' + eventName, callback);\n\n            // If there are no callbacks left, remove the listener\n            if (lastCallback) {\n                this.callMethod('removeEventListener', eventName).catch(function (e) {\n                    // Ignore the error. There will be an error event fired that\n                    // will trigger the error callback if they are listening.\n                });\n            }\n        }\n\n        /**\n         * A promise to load a new video.\n         *\n         * @promise LoadVideoPromise\n         * @fulfill {number} The video with this id successfully loaded.\n         * @reject {TypeError} The id was not a number.\n         */\n        /**\n         * Load a new video into this embed. The promise will be resolved if\n         * the video is successfully loaded, or it will be rejected if it could\n         * not be loaded.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @param {number} id The id of the video.\n         * @return {LoadVideoPromise}\n         */\n\n    }, {\n        key: 'loadVideo',\n        value: function loadVideo(id) {\n            return this.callMethod('loadVideo', id);\n        }\n\n        /**\n         * A promise to perform an action when the Player is ready.\n         *\n         * @todo document errors\n         * @promise LoadVideoPromise\n         * @fulfill {void}\n         */\n        /**\n         * Trigger a function when the player iframe has initialized. You do not\n         * need to wait for `ready` to trigger to begin adding event listeners\n         * or calling other methods.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @return {ReadyPromise}\n         */\n\n    }, {\n        key: 'ready',\n        value: function ready() {\n            var readyPromise = readyMap.get(this);\n            return npo_src.resolve(readyPromise);\n        }\n\n        /**\n         * A promise to add a cue point to the player.\n         *\n         * @promise AddCuePointPromise\n         * @fulfill {string} The id of the cue point to use for removeCuePoint.\n         * @reject {RangeError} the time was less than 0 or greater than the\n         *         video’s duration.\n         * @reject {UnsupportedError} Cue points are not supported with the current\n         *         player or browser.\n         */\n        /**\n         * Add a cue point to the player.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @param {number} time The time for the cue point.\n         * @param {object} [data] Arbitrary data to be returned with the cue point.\n         * @return {AddCuePointPromise}\n         */\n\n    }, {\n        key: 'addCuePoint',\n        value: function addCuePoint(time) {\n            var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            return this.callMethod('addCuePoint', { time: time, data: data });\n        }\n\n        /**\n         * A promise to remove a cue point from the player.\n         *\n         * @promise AddCuePointPromise\n         * @fulfill {string} The id of the cue point that was removed.\n         * @reject {InvalidCuePoint} The cue point with the specified id was not\n         *         found.\n         * @reject {UnsupportedError} Cue points are not supported with the current\n         *         player or browser.\n         */\n        /**\n         * Remove a cue point from the video.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @param {string} id The id of the cue point to remove.\n         * @return {RemoveCuePointPromise}\n         */\n\n    }, {\n        key: 'removeCuePoint',\n        value: function removeCuePoint(id) {\n            return this.callMethod('removeCuePoint', id);\n        }\n\n        /**\n         * A representation of a text track on a video.\n         *\n         * @typedef {Object} VimeoTextTrack\n         * @property {string} language The ISO language code.\n         * @property {string} kind The kind of track it is (captions or subtitles).\n         * @property {string} label The human‐readable label for the track.\n         */\n        /**\n         * A promise to enable a text track.\n         *\n         * @promise EnableTextTrackPromise\n         * @fulfill {VimeoTextTrack} The text track that was enabled.\n         * @reject {InvalidTrackLanguageError} No track was available with the\n         *         specified language.\n         * @reject {InvalidTrackError} No track was available with the specified\n         *         language and kind.\n         */\n        /**\n         * Enable the text track with the specified language, and optionally the\n         * specified kind (captions or subtitles).\n         *\n         * When set via the API, the track language will not change the viewer’s\n         * stored preference.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @param {string} language The two‐letter language code.\n         * @param {string} [kind] The kind of track to enable (captions or subtitles).\n         * @return {EnableTextTrackPromise}\n         */\n\n    }, {\n        key: 'enableTextTrack',\n        value: function enableTextTrack(language, kind) {\n            if (!language) {\n                throw new TypeError('You must pass a language.');\n            }\n\n            return this.callMethod('enableTextTrack', {\n                language: language,\n                kind: kind\n            });\n        }\n\n        /**\n         * A promise to disable the active text track.\n         *\n         * @promise DisableTextTrackPromise\n         * @fulfill {void} The track was disabled.\n         */\n        /**\n         * Disable the currently-active text track.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @return {DisableTextTrackPromise}\n         */\n\n    }, {\n        key: 'disableTextTrack',\n        value: function disableTextTrack() {\n            return this.callMethod('disableTextTrack');\n        }\n\n        /**\n         * A promise to pause the video.\n         *\n         * @promise PausePromise\n         * @fulfill {void} The video was paused.\n         */\n        /**\n         * Pause the video if it’s playing.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @return {PausePromise}\n         */\n\n    }, {\n        key: 'pause',\n        value: function pause() {\n            return this.callMethod('pause');\n        }\n\n        /**\n         * A promise to play the video.\n         *\n         * @promise PlayPromise\n         * @fulfill {void} The video was played.\n         */\n        /**\n         * Play the video if it’s paused. **Note:** on iOS and some other\n         * mobile devices, you cannot programmatically trigger play. Once the\n         * viewer has tapped on the play button in the player, however, you\n         * will be able to use this function.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @return {PlayPromise}\n         */\n\n    }, {\n        key: 'play',\n        value: function play() {\n            return this.callMethod('play');\n        }\n\n        /**\n         * A promise to unload the video.\n         *\n         * @promise UnloadPromise\n         * @fulfill {void} The video was unloaded.\n         */\n        /**\n         * Return the player to its initial state.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @return {UnloadPromise}\n         */\n\n    }, {\n        key: 'unload',\n        value: function unload() {\n            return this.callMethod('unload');\n        }\n\n        /**\n         * A promise to get the autopause behavior of the video.\n         *\n         * @promise GetAutopausePromise\n         * @fulfill {boolean} Whether autopause is turned on or off.\n         * @reject {UnsupportedError} Autopause is not supported with the current\n         *         player or browser.\n         */\n        /**\n         * Get the autopause behavior for this player.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @return {GetAutopausePromise}\n         */\n\n    }, {\n        key: 'getAutopause',\n        value: function getAutopause() {\n            return this.get('autopause');\n        }\n\n        /**\n         * A promise to set the autopause behavior of the video.\n         *\n         * @promise SetAutopausePromise\n         * @fulfill {boolean} Whether autopause is turned on or off.\n         * @reject {UnsupportedError} Autopause is not supported with the current\n         *         player or browser.\n         */\n        /**\n         * Enable or disable the autopause behavior of this player.\n         *\n         * By default, when another video is played in the same browser, this\n         * player will automatically pause. Unless you have a specific reason\n         * for doing so, we recommend that you leave autopause set to the\n         * default (`true`).\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @param {boolean} autopause\n         * @return {SetAutopausePromise}\n         */\n\n    }, {\n        key: 'setAutopause',\n        value: function setAutopause(autopause) {\n            return this.set('autopause', autopause);\n        }\n\n        /**\n         * A promise to get the color of the player.\n         *\n         * @promise GetColorPromise\n         * @fulfill {string} The hex color of the player.\n         */\n        /**\n         * Get the color for this player.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @return {GetColorPromise}\n         */\n\n    }, {\n        key: 'getColor',\n        value: function getColor() {\n            return this.get('color');\n        }\n\n        /**\n         * A promise to set the color of the player.\n         *\n         * @promise SetColorPromise\n         * @fulfill {string} The color was successfully set.\n         * @reject {TypeError} The string was not a valid hex or rgb color.\n         * @reject {ContrastError} The color was set, but the contrast is\n         *         outside of the acceptable range.\n         * @reject {EmbedSettingsError} The owner of the player has chosen to\n         *         use a specific color.\n         */\n        /**\n         * Set the color of this player to a hex or rgb string. Setting the\n         * color may fail if the owner of the video has set their embed\n         * preferences to force a specific color.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @param {string} color The hex or rgb color string to set.\n         * @return {SetColorPromise}\n         */\n\n    }, {\n        key: 'setColor',\n        value: function setColor(color) {\n            return this.set('color', color);\n        }\n\n        /**\n         * A representation of a cue point.\n         *\n         * @typedef {Object} VimeoCuePoint\n         * @property {number} time The time of the cue point.\n         * @property {object} data The data passed when adding the cue point.\n         * @property {string} id The unique id for use with removeCuePoint.\n         */\n        /**\n         * A promise to get the cue points of a video.\n         *\n         * @promise GetCuePointsPromise\n         * @fulfill {VimeoCuePoint[]} The cue points added to the video.\n         * @reject {UnsupportedError} Cue points are not supported with the current\n         *         player or browser.\n         */\n        /**\n         * Get an array of the cue points added to the video.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @return {GetCuePointsPromise}\n         */\n\n    }, {\n        key: 'getCuePoints',\n        value: function getCuePoints() {\n            return this.get('cuePoints');\n        }\n\n        /**\n         * A promise to get the current time of the video.\n         *\n         * @promise GetCurrentTimePromise\n         * @fulfill {number} The current time in seconds.\n         */\n        /**\n         * Get the current playback position in seconds.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @return {GetCurrentTimePromise}\n         */\n\n    }, {\n        key: 'getCurrentTime',\n        value: function getCurrentTime() {\n            return this.get('currentTime');\n        }\n\n        /**\n         * A promise to set the current time of the video.\n         *\n         * @promise SetCurrentTimePromise\n         * @fulfill {number} The actual current time that was set.\n         * @reject {RangeError} the time was less than 0 or greater than the\n         *         video’s duration.\n         */\n        /**\n         * Set the current playback position in seconds. If the player was\n         * paused, it will remain paused. Likewise, if the player was playing,\n         * it will resume playing once the video has buffered.\n         *\n         * You can provide an accurate time and the player will attempt to seek\n         * to as close to that time as possible. The exact time will be the\n         * fulfilled value of the promise.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @param {number} currentTime\n         * @return {SetCurrentTimePromise}\n         */\n\n    }, {\n        key: 'setCurrentTime',\n        value: function setCurrentTime(currentTime) {\n            return this.set('currentTime', currentTime);\n        }\n\n        /**\n         * A promise to get the duration of the video.\n         *\n         * @promise GetDurationPromise\n         * @fulfill {number} The duration in seconds.\n         */\n        /**\n         * Get the duration of the video in seconds. It will be rounded to the\n         * nearest second before playback begins, and to the nearest thousandth\n         * of a second after playback begins.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @return {GetDurationPromise}\n         */\n\n    }, {\n        key: 'getDuration',\n        value: function getDuration() {\n            return this.get('duration');\n        }\n\n        /**\n         * A promise to get the ended state of the video.\n         *\n         * @promise GetEndedPromise\n         * @fulfill {boolean} Whether or not the video has ended.\n         */\n        /**\n         * Get the ended state of the video. The video has ended if\n         * `currentTime === duration`.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @return {GetEndedPromise}\n         */\n\n    }, {\n        key: 'getEnded',\n        value: function getEnded() {\n            return this.get('ended');\n        }\n\n        /**\n         * A promise to get the loop state of the player.\n         *\n         * @promise GetLoopPromise\n         * @fulfill {boolean} Whether or not the player is set to loop.\n         */\n        /**\n         * Get the loop state of the player.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @return {GetLoopPromise}\n         */\n\n    }, {\n        key: 'getLoop',\n        value: function getLoop() {\n            return this.get('loop');\n        }\n\n        /**\n         * A promise to set the loop state of the player.\n         *\n         * @promise SetLoopPromise\n         * @fulfill {boolean} The loop state that was set.\n         */\n        /**\n         * Set the loop state of the player. When set to `true`, the player\n         * will start over immediately once playback ends.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @param {boolean} loop\n         * @return {SetLoopPromise}\n         */\n\n    }, {\n        key: 'setLoop',\n        value: function setLoop(loop) {\n            return this.set('loop', loop);\n        }\n\n        /**\n         * A promise to get the paused state of the player.\n         *\n         * @promise GetLoopPromise\n         * @fulfill {boolean} Whether or not the video is paused.\n         */\n        /**\n         * Get the paused state of the player.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @return {GetLoopPromise}\n         */\n\n    }, {\n        key: 'getPaused',\n        value: function getPaused() {\n            return this.get('paused');\n        }\n\n        /**\n         * A promise to get the text tracks of a video.\n         *\n         * @promise GetTextTracksPromise\n         * @fulfill {VimeoTextTrack[]} The text tracks associated with the video.\n         */\n        /**\n         * Get an array of the text tracks that exist for the video.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @return {GetTextTracksPromise}\n         */\n\n    }, {\n        key: 'getTextTracks',\n        value: function getTextTracks() {\n            return this.get('textTracks');\n        }\n\n        /**\n         * A promise to get the embed code for the video.\n         *\n         * @promise GetVideoEmbedCodePromise\n         * @fulfill {string} The `<iframe>` embed code for the video.\n         */\n        /**\n         * Get the `<iframe>` embed code for the video.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @return {GetVideoEmbedCodePromise}\n         */\n\n    }, {\n        key: 'getVideoEmbedCode',\n        value: function getVideoEmbedCode() {\n            return this.get('videoEmbedCode');\n        }\n\n        /**\n         * A promise to get the id of the video.\n         *\n         * @promise GetVideoIdPromise\n         * @fulfill {number} The id of the video.\n         */\n        /**\n         * Get the id of the video.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @return {GetVideoIdPromise}\n         */\n\n    }, {\n        key: 'getVideoId',\n        value: function getVideoId() {\n            return this.get('videoId');\n        }\n\n        /**\n         * A promise to get the title of the video.\n         *\n         * @promise GetVideoTitlePromise\n         * @fulfill {number} The title of the video.\n         */\n        /**\n         * Get the title of the video.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @return {GetVideoTitlePromise}\n         */\n\n    }, {\n        key: 'getVideoTitle',\n        value: function getVideoTitle() {\n            return this.get('videoTitle');\n        }\n\n        /**\n         * A promise to get the native width of the video.\n         *\n         * @promise GetVideoWidthPromise\n         * @fulfill {number} The native width of the video.\n         */\n        /**\n         * Get the native width of the currently‐playing video. The width of\n         * the highest‐resolution available will be used before playback begins.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @return {GetVideoWidthPromise}\n         */\n\n    }, {\n        key: 'getVideoWidth',\n        value: function getVideoWidth() {\n            return this.get('videoWidth');\n        }\n\n        /**\n         * A promise to get the native height of the video.\n         *\n         * @promise GetVideoHeightPromise\n         * @fulfill {number} The native height of the video.\n         */\n        /**\n         * Get the native height of the currently‐playing video. The height of\n         * the highest‐resolution available will be used before playback begins.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @return {GetVideoHeightPromise}\n         */\n\n    }, {\n        key: 'getVideoHeight',\n        value: function getVideoHeight() {\n            return this.get('videoHeight');\n        }\n\n        /**\n         * A promise to get the vimeo.com url for the video.\n         *\n         * @promise GetVideoUrlPromise\n         * @fulfill {number} The vimeo.com url for the video.\n         * @reject {PrivacyError} The url isn’t available because of the video’s privacy setting.\n         */\n        /**\n         * Get the vimeo.com url for the video.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @return {GetVideoUrlPromise}\n         */\n\n    }, {\n        key: 'getVideoUrl',\n        value: function getVideoUrl() {\n            return this.get('videoUrl');\n        }\n\n        /**\n         * A promise to get the volume level of the player.\n         *\n         * @promise GetVolumePromise\n         * @fulfill {number} The volume level of the player on a scale from 0 to 1.\n         */\n        /**\n         * Get the current volume level of the player on a scale from `0` to `1`.\n         *\n         * Most mobile devices do not support an independent volume from the\n         * system volume. In those cases, this method will always return `1`.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @return {GetVolumePromise}\n         */\n\n    }, {\n        key: 'getVolume',\n        value: function getVolume() {\n            return this.get('volume');\n        }\n\n        /**\n         * A promise to set the volume level of the player.\n         *\n         * @promise SetVolumePromise\n         * @fulfill {number} The volume was set.\n         * @reject {RangeError} The volume was less than 0 or greater than 1.\n         */\n        /**\n         * Set the volume of the player on a scale from `0` to `1`. When set\n         * via the API, the volume level will not be synchronized to other\n         * players or stored as the viewer’s preference.\n         *\n         * Most mobile devices do not support setting the volume. An error will\n         * *not* be triggered in that situation.\n         *\n         * @author Brad Dougherty <brad@vimeo.com>\n         * @param {number} volume\n         * @return {SetVolumePromise}\n         */\n\n    }, {\n        key: 'setVolume',\n        value: function setVolume(volume) {\n            return this.set('volume', volume);\n        }\n    }]);\n\n    return Player;\n}();\n\ninitializeEmbeds();\n\nreturn Player;\n\n})));\n\n//# sourceMappingURL=player.js.map\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(10).setImmediate))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2hvbWUvc3RhdGljL2hvbWUvY3NzL3BhcmF4aWZ5LmNzcz84NjlhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ob21lL3N0YXRpYy9ob21lL2Nzcy9wYXJheGlmeS5jc3Ncbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2hvbWUvc3RhdGljL2hvbWUvc3R5bC9ob21lLnN0eWw/ZTlkNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vaG9tZS9zdGF0aWMvaG9tZS9zdHlsL2hvbWUuc3R5bFxuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vbm9ybWFsaXplLmNzcy9ub3JtYWxpemUuY3NzP2EwMWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbm9ybWFsaXplLmNzcy9ub3JtYWxpemUuY3NzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function (global, factory) {\n\t true ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.shuffle = factory());\n}(this, (function () { 'use strict';\n\n// Polyfill for creating CustomEvents on IE9/10/11\n\n// code pulled from:\n// https://github.com/d4tocchini/customevent-polyfill\n// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent#Polyfill\n\ntry {\n    var ce = new window.CustomEvent('test');\n    ce.preventDefault();\n    if (ce.defaultPrevented !== true) {\n        // IE has problems with .preventDefault() on custom events\n        // http://stackoverflow.com/questions/23349191\n        throw new Error('Could not prevent default');\n    }\n} catch(e) {\n  var CustomEvent$1 = function(event, params) {\n    var evt, origPrevent;\n    params = params || {\n      bubbles: false,\n      cancelable: false,\n      detail: undefined\n    };\n\n    evt = document.createEvent(\"CustomEvent\");\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n    origPrevent = evt.preventDefault;\n    evt.preventDefault = function () {\n      origPrevent.call(this);\n      try {\n        Object.defineProperty(this, 'defaultPrevented', {\n          get: function () {\n            return true;\n          }\n        });\n      } catch(e) {\n        this.defaultPrevented = true;\n      }\n    };\n    return evt;\n  };\n\n  CustomEvent$1.prototype = window.Event.prototype;\n  window.CustomEvent = CustomEvent$1; // expose definition to window\n}\n\nvar proto = Element.prototype;\nvar vendor = proto.matches\n  || proto.matchesSelector\n  || proto.webkitMatchesSelector\n  || proto.mozMatchesSelector\n  || proto.msMatchesSelector\n  || proto.oMatchesSelector;\n\nvar index = match;\n\n/**\n * Match `el` to `selector`.\n *\n * @param {Element} el\n * @param {String} selector\n * @return {Boolean}\n * @api public\n */\n\nfunction match(el, selector) {\n  if (vendor) return vendor.call(el, selector);\n  var nodes = el.parentNode.querySelectorAll(selector);\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] == el) return true;\n  }\n  return false;\n}\n\nvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n\n\n\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar index$1 = createCommonjsModule(function (module) {\n'use strict';\n\n// there's 3 implementations written in increasing order of efficiency\n\n// 1 - no Set type is defined\nfunction uniqNoSet(arr) {\n\tvar ret = [];\n\n\tfor (var i = 0; i < arr.length; i++) {\n\t\tif (ret.indexOf(arr[i]) === -1) {\n\t\t\tret.push(arr[i]);\n\t\t}\n\t}\n\n\treturn ret;\n}\n\n// 2 - a simple Set type is defined\nfunction uniqSet(arr) {\n\tvar seen = new Set();\n\treturn arr.filter(function (el) {\n\t\tif (!seen.has(el)) {\n\t\t\tseen.add(el);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t});\n}\n\n// 3 - a standard Set type is defined and it has a forEach method\nfunction uniqSetWithForEach(arr) {\n\tvar ret = [];\n\n\t(new Set(arr)).forEach(function (el) {\n\t\tret.push(el);\n\t});\n\n\treturn ret;\n}\n\n// V8 currently has a broken implementation\n// https://github.com/joyent/node/issues/8449\nfunction doesForEachActuallyWork() {\n\tvar ret = false;\n\n\t(new Set([true])).forEach(function (el) {\n\t\tret = el;\n\t});\n\n\treturn ret === true;\n}\n\nif ('Set' in commonjsGlobal) {\n\tif (typeof Set.prototype.forEach === 'function' && doesForEachActuallyWork()) {\n\t\tmodule.exports = uniqSetWithForEach;\n\t} else {\n\t\tmodule.exports = uniqSet;\n\t}\n} else {\n\tmodule.exports = uniqNoSet;\n}\n});\n\nvar immutable = extend;\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {};\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i];\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n            }\n        }\n    }\n\n    return target\n}\n\nvar index$2 = throttle;\n\n/**\n * Returns a new function that, when invoked, invokes `func` at most once per `wait` milliseconds.\n *\n * @param {Function} func Function to wrap.\n * @param {Number} wait Number of milliseconds that must elapse between `func` invocations.\n * @return {Function} A new function that wraps the `func` function passed in.\n */\n\nfunction throttle (func, wait) {\n  var ctx, args, rtn, timeoutID; // caching\n  var last = 0;\n\n  return function throttled () {\n    ctx = this;\n    args = arguments;\n    var delta = new Date() - last;\n    if (!timeoutID)\n      if (delta >= wait) call();\n      else timeoutID = setTimeout(call, wait - delta);\n    return rtn;\n  };\n\n  function call () {\n    timeoutID = 0;\n    last = +new Date();\n    rtn = func.apply(ctx, args);\n    ctx = null;\n    args = null;\n  }\n}\n\nvar index$3 = function parallel(fns, context, callback) {\n  if (!callback) {\n    if (typeof context === 'function') {\n      callback = context;\n      context = null;\n    } else {\n      callback = noop;\n    }\n  }\n\n  var pending = fns && fns.length;\n  if (!pending) return callback(null, []);\n\n  var finished = false;\n  var results = new Array(pending);\n\n  fns.forEach(context ? function (fn, i) {\n    fn.call(context, maybeDone(i));\n  } : function (fn, i) {\n    fn(maybeDone(i));\n  });\n\n  function maybeDone(i) {\n    return function (err, result) {\n      if (finished) return;\n\n      if (err) {\n        callback(err, results);\n        finished = true;\n        return\n      }\n\n      results[i] = result;\n\n      if (!--pending) callback(null, results);\n    }\n  }\n};\n\nfunction noop() {}\n\n/**\n * Always returns a numeric value, given a value. Logic from jQuery's `isNumeric`.\n * @param {*} value Possibly numeric value.\n * @return {number} `value` or zero if `value` isn't numeric.\n */\nfunction getNumber(value) {\n  return parseFloat(value) || 0;\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar Point = function () {\n\n  /**\n   * Represents a coordinate pair.\n   * @param {number} [x=0] X.\n   * @param {number} [y=0] Y.\n   */\n  function Point(x, y) {\n    classCallCheck(this, Point);\n\n    this.x = getNumber(x);\n    this.y = getNumber(y);\n  }\n\n  /**\n   * Whether two points are equal.\n   * @param {Point} a Point A.\n   * @param {Point} b Point B.\n   * @return {boolean}\n   */\n\n\n  createClass(Point, null, [{\n    key: 'equals',\n    value: function equals(a, b) {\n      return a.x === b.x && a.y === b.y;\n    }\n  }]);\n  return Point;\n}();\n\nvar Classes = {\n  BASE: 'shuffle',\n  SHUFFLE_ITEM: 'shuffle-item',\n  VISIBLE: 'shuffle-item--visible',\n  HIDDEN: 'shuffle-item--hidden'\n};\n\nvar id$1 = 0;\n\nvar ShuffleItem = function () {\n  function ShuffleItem(element) {\n    classCallCheck(this, ShuffleItem);\n\n    id$1 += 1;\n    this.id = id$1;\n    this.element = element;\n    this.isVisible = true;\n  }\n\n  createClass(ShuffleItem, [{\n    key: 'show',\n    value: function show() {\n      this.isVisible = true;\n      this.element.classList.remove(Classes.HIDDEN);\n      this.element.classList.add(Classes.VISIBLE);\n    }\n  }, {\n    key: 'hide',\n    value: function hide() {\n      this.isVisible = false;\n      this.element.classList.remove(Classes.VISIBLE);\n      this.element.classList.add(Classes.HIDDEN);\n    }\n  }, {\n    key: 'init',\n    value: function init() {\n      this.addClasses([Classes.SHUFFLE_ITEM, Classes.VISIBLE]);\n      this.applyCss(ShuffleItem.Css.INITIAL);\n      this.scale = ShuffleItem.Scale.VISIBLE;\n      this.point = new Point();\n    }\n  }, {\n    key: 'addClasses',\n    value: function addClasses(classes) {\n      var _this = this;\n\n      classes.forEach(function (className) {\n        _this.element.classList.add(className);\n      });\n    }\n  }, {\n    key: 'removeClasses',\n    value: function removeClasses(classes) {\n      var _this2 = this;\n\n      classes.forEach(function (className) {\n        _this2.element.classList.remove(className);\n      });\n    }\n  }, {\n    key: 'applyCss',\n    value: function applyCss(obj) {\n      var _this3 = this;\n\n      Object.keys(obj).forEach(function (key) {\n        _this3.element.style[key] = obj[key];\n      });\n    }\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.removeClasses([Classes.HIDDEN, Classes.VISIBLE, Classes.SHUFFLE_ITEM]);\n\n      this.element.removeAttribute('style');\n      this.element = null;\n    }\n  }]);\n  return ShuffleItem;\n}();\n\nShuffleItem.Css = {\n  INITIAL: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    visibility: 'visible',\n    'will-change': 'transform'\n  },\n  VISIBLE: {\n    before: {\n      opacity: 1,\n      visibility: 'visible'\n    },\n    after: {}\n  },\n  HIDDEN: {\n    before: {\n      opacity: 0\n    },\n    after: {\n      visibility: 'hidden'\n    }\n  }\n};\n\nShuffleItem.Scale = {\n  VISIBLE: 1,\n  HIDDEN: 0.001\n};\n\nvar element = document.body || document.documentElement;\nvar e$1 = document.createElement('div');\ne$1.style.cssText = 'width:10px;padding:2px;box-sizing:border-box;';\nelement.appendChild(e$1);\n\nvar width = window.getComputedStyle(e$1, null).width;\nvar ret = width === '10px';\n\nelement.removeChild(e$1);\n\n/**\n * Retrieve the computed style for an element, parsed as a float.\n * @param {Element} element Element to get style for.\n * @param {string} style Style property.\n * @param {CSSStyleDeclaration} [styles] Optionally include clean styles to\n *     use instead of asking for them again.\n * @return {number} The parsed computed value or zero if that fails because IE\n *     will return 'auto' when the element doesn't have margins instead of\n *     the computed style.\n */\nfunction getNumberStyle(element, style) {\n  var styles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window.getComputedStyle(element, null);\n\n  var value = getNumber(styles[style]);\n\n  // Support IE<=11 and W3C spec.\n  if (!ret && style === 'width') {\n    value += getNumber(styles.paddingLeft) + getNumber(styles.paddingRight) + getNumber(styles.borderLeftWidth) + getNumber(styles.borderRightWidth);\n  } else if (!ret && style === 'height') {\n    value += getNumber(styles.paddingTop) + getNumber(styles.paddingBottom) + getNumber(styles.borderTopWidth) + getNumber(styles.borderBottomWidth);\n  }\n\n  return value;\n}\n\n/**\n * Fisher-Yates shuffle.\n * http://stackoverflow.com/a/962890/373422\n * https://bost.ocks.org/mike/shuffle/\n * @param {Array} array Array to shuffle.\n * @return {Array} Randomly sorted array.\n */\nfunction randomize(array) {\n  var n = array.length;\n\n  while (n) {\n    n -= 1;\n    var i = Math.floor(Math.random() * (n + 1));\n    var temp = array[i];\n    array[i] = array[n];\n    array[n] = temp;\n  }\n\n  return array;\n}\n\nvar defaults$1 = {\n  // Use array.reverse() to reverse the results\n  reverse: false,\n\n  // Sorting function\n  by: null,\n\n  // If true, this will skip the sorting and return a randomized order in the array\n  randomize: false,\n\n  // Determines which property of each item in the array is passed to the\n  // sorting method.\n  key: 'element'\n};\n\n// You can return `undefined` from the `by` function to revert to DOM order.\nfunction sorter(arr, options) {\n  var opts = immutable(defaults$1, options);\n  var original = [].slice.call(arr);\n  var revert = false;\n\n  if (!arr.length) {\n    return [];\n  }\n\n  if (opts.randomize) {\n    return randomize(arr);\n  }\n\n  // Sort the elements by the opts.by function.\n  // If we don't have opts.by, default to DOM order\n  if (typeof opts.by === 'function') {\n    arr.sort(function (a, b) {\n      // Exit early if we already know we want to revert\n      if (revert) {\n        return 0;\n      }\n\n      var valA = opts.by(a[opts.key]);\n      var valB = opts.by(b[opts.key]);\n\n      // If both values are undefined, use the DOM order\n      if (valA === undefined && valB === undefined) {\n        revert = true;\n        return 0;\n      }\n\n      if (valA < valB || valA === 'sortFirst' || valB === 'sortLast') {\n        return -1;\n      }\n\n      if (valA > valB || valA === 'sortLast' || valB === 'sortFirst') {\n        return 1;\n      }\n\n      return 0;\n    });\n  }\n\n  // Revert to the original array if necessary\n  if (revert) {\n    return original;\n  }\n\n  if (opts.reverse) {\n    arr.reverse();\n  }\n\n  return arr;\n}\n\nvar transitions = {};\nvar eventName = 'transitionend';\nvar count = 0;\n\nfunction uniqueId() {\n  count += 1;\n  return eventName + count;\n}\n\nfunction cancelTransitionEnd(id) {\n  if (transitions[id]) {\n    transitions[id].element.removeEventListener(eventName, transitions[id].listener);\n    transitions[id] = null;\n    return true;\n  }\n\n  return false;\n}\n\nfunction onTransitionEnd(element, callback) {\n  var id = uniqueId();\n  var listener = function listener(evt) {\n    if (evt.currentTarget === evt.target) {\n      cancelTransitionEnd(id);\n      callback(evt);\n    }\n  };\n\n  element.addEventListener(eventName, listener);\n\n  transitions[id] = { element: element, listener: listener };\n\n  return id;\n}\n\nfunction arrayMax(array) {\n  return Math.max.apply(Math, array); // eslint-disable-line prefer-spread\n}\n\nfunction arrayMin(array) {\n  return Math.min.apply(Math, array); // eslint-disable-line prefer-spread\n}\n\n/**\n * Determine the number of columns an items spans.\n * @param {number} itemWidth Width of the item.\n * @param {number} columnWidth Width of the column (includes gutter).\n * @param {number} columns Total number of columns\n * @param {number} threshold A buffer value for the size of the column to fit.\n * @return {number}\n */\nfunction getColumnSpan(itemWidth, columnWidth, columns, threshold) {\n  var columnSpan = itemWidth / columnWidth;\n\n  // If the difference between the rounded column span number and the\n  // calculated column span number is really small, round the number to\n  // make it fit.\n  if (Math.abs(Math.round(columnSpan) - columnSpan) < threshold) {\n    // e.g. columnSpan = 4.0089945390298745\n    columnSpan = Math.round(columnSpan);\n  }\n\n  // Ensure the column span is not more than the amount of columns in the whole layout.\n  return Math.min(Math.ceil(columnSpan), columns);\n}\n\n/**\n * Retrieves the column set to use for placement.\n * @param {number} columnSpan The number of columns this current item spans.\n * @param {number} columns The total columns in the grid.\n * @return {Array.<number>} An array of numbers represeting the column set.\n */\nfunction getAvailablePositions(positions, columnSpan, columns) {\n  // The item spans only one column.\n  if (columnSpan === 1) {\n    return positions;\n  }\n\n  // The item spans more than one column, figure out how many different\n  // places it could fit horizontally.\n  // The group count is the number of places within the positions this block\n  // could fit, ignoring the current positions of items.\n  // Imagine a 2 column brick as the second item in a 4 column grid with\n  // 10px height each. Find the places it would fit:\n  // [20, 10, 10, 0]\n  //  |   |   |\n  //  *   *   *\n  //\n  // Then take the places which fit and get the bigger of the two:\n  // max([20, 10]), max([10, 10]), max([10, 0]) = [20, 10, 0]\n  //\n  // Next, find the first smallest number (the short column).\n  // [20, 10, 0]\n  //          |\n  //          *\n  //\n  // And that's where it should be placed!\n  //\n  // Another example where the second column's item extends past the first:\n  // [10, 20, 10, 0] => [20, 20, 10] => 10\n  var available = [];\n\n  // For how many possible positions for this item there are.\n  for (var i = 0; i <= columns - columnSpan; i++) {\n    // Find the bigger value for each place it could fit.\n    available.push(arrayMax(positions.slice(i, i + columnSpan)));\n  }\n\n  return available;\n}\n\n/**\n * Find index of short column, the first from the left where this item will go.\n *\n * @param {Array.<number>} positions The array to search for the smallest number.\n * @param {number} buffer Optional buffer which is very useful when the height\n *     is a percentage of the width.\n * @return {number} Index of the short column.\n */\nfunction getShortColumn(positions, buffer) {\n  var minPosition = arrayMin(positions);\n  for (var i = 0, len = positions.length; i < len; i++) {\n    if (positions[i] >= minPosition - buffer && positions[i] <= minPosition + buffer) {\n      return i;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * Determine the location of the next item, based on its size.\n * @param {Object} itemSize Object with width and height.\n * @param {Array.<number>} positions Positions of the other current items.\n * @param {number} gridSize The column width or row height.\n * @param {number} total The total number of columns or rows.\n * @param {number} threshold Buffer value for the column to fit.\n * @param {number} buffer Vertical buffer for the height of items.\n * @return {Point}\n */\nfunction getItemPosition(_ref) {\n  var itemSize = _ref.itemSize,\n      positions = _ref.positions,\n      gridSize = _ref.gridSize,\n      total = _ref.total,\n      threshold = _ref.threshold,\n      buffer = _ref.buffer;\n\n  var span = getColumnSpan(itemSize.width, gridSize, total, threshold);\n  var setY = getAvailablePositions(positions, span, total);\n  var shortColumnIndex = getShortColumn(setY, buffer);\n\n  // Position the item\n  var point = new Point(Math.round(gridSize * shortColumnIndex), Math.round(setY[shortColumnIndex]));\n\n  // Update the columns array with the new values for each column.\n  // e.g. before the update the columns could be [250, 0, 0, 0] for an item\n  // which spans 2 columns. After it would be [250, itemHeight, itemHeight, 0].\n  var setHeight = setY[shortColumnIndex] + itemSize.height;\n  for (var i = 0; i < span; i++) {\n    positions[shortColumnIndex + i] = setHeight;\n  }\n\n  return point;\n}\n\nfunction toArray$$1(arrayLike) {\n  return Array.prototype.slice.call(arrayLike);\n}\n\nfunction arrayIncludes(array, obj) {\n  return array.indexOf(obj) > -1;\n}\n\n// Used for unique instance variables\nvar id = 0;\n\nvar Shuffle = function () {\n\n  /**\n   * Categorize, sort, and filter a responsive grid of items.\n   *\n   * @param {Element} element An element which is the parent container for the grid items.\n   * @param {Object} [options=Shuffle.options] Options object.\n   * @constructor\n   */\n  function Shuffle(element) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, Shuffle);\n\n    this.options = immutable(Shuffle.options, options);\n\n    this.useSizer = false;\n    this.lastSort = {};\n    this.group = Shuffle.ALL_ITEMS;\n    this.lastFilter = Shuffle.ALL_ITEMS;\n    this.isEnabled = true;\n    this.isDestroyed = false;\n    this.isInitialized = false;\n    this._transitions = [];\n    this.isTransitioning = false;\n    this._queue = [];\n\n    var el = this._getElementOption(element);\n\n    if (!el) {\n      throw new TypeError('Shuffle needs to be initialized with an element.');\n    }\n\n    this.element = el;\n    this.id = 'shuffle_' + id;\n    id += 1;\n\n    this._init();\n    this.isInitialized = true;\n  }\n\n  createClass(Shuffle, [{\n    key: '_init',\n    value: function _init() {\n      this.items = this._getItems();\n\n      this.options.sizer = this._getElementOption(this.options.sizer);\n\n      if (this.options.sizer) {\n        this.useSizer = true;\n      }\n\n      // Add class and invalidate styles\n      this.element.classList.add(Shuffle.Classes.BASE);\n\n      // Set initial css for each item\n      this._initItems();\n\n      // Bind resize events\n      this._onResize = this._getResizeFunction();\n      window.addEventListener('resize', this._onResize);\n\n      // Get container css all in one request. Causes reflow\n      var containerCss = window.getComputedStyle(this.element, null);\n      var containerWidth = Shuffle.getSize(this.element).width;\n\n      // Add styles to the container if it doesn't have them.\n      this._validateStyles(containerCss);\n\n      // We already got the container's width above, no need to cause another\n      // reflow getting it again... Calculate the number of columns there will be\n      this._setColumns(containerWidth);\n\n      // Kick off!\n      this.filter(this.options.group, this.options.initialSort);\n\n      // The shuffle items haven't had transitions set on them yet so the user\n      // doesn't see the first layout. Set them now that the first layout is done.\n      // First, however, a synchronous layout must be caused for the previous\n      // styles to be applied without transitions.\n      this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n      this._setTransitions();\n      this.element.style.transition = 'height ' + this.options.speed + 'ms ' + this.options.easing;\n    }\n\n    /**\n     * Returns a throttled and proxied function for the resize handler.\n     * @return {Function}\n     * @private\n     */\n\n  }, {\n    key: '_getResizeFunction',\n    value: function _getResizeFunction() {\n      var resizeFunction = this._handleResize.bind(this);\n      return this.options.throttle ? this.options.throttle(resizeFunction, this.options.throttleTime) : resizeFunction;\n    }\n\n    /**\n     * Retrieve an element from an option.\n     * @param {string|jQuery|Element} option The option to check.\n     * @return {?Element} The plain element or null.\n     * @private\n     */\n\n  }, {\n    key: '_getElementOption',\n    value: function _getElementOption(option) {\n      // If column width is a string, treat is as a selector and search for the\n      // sizer element within the outermost container\n      if (typeof option === 'string') {\n        return this.element.querySelector(option);\n\n        // Check for an element\n      } else if (option && option.nodeType && option.nodeType === 1) {\n        return option;\n\n        // Check for jQuery object\n      } else if (option && option.jquery) {\n        return option[0];\n      }\n\n      return null;\n    }\n\n    /**\n     * Ensures the shuffle container has the css styles it needs applied to it.\n     * @param {Object} styles Key value pairs for position and overflow.\n     * @private\n     */\n\n  }, {\n    key: '_validateStyles',\n    value: function _validateStyles(styles) {\n      // Position cannot be static.\n      if (styles.position === 'static') {\n        this.element.style.position = 'relative';\n      }\n\n      // Overflow has to be hidden.\n      if (styles.overflow !== 'hidden') {\n        this.element.style.overflow = 'hidden';\n      }\n    }\n\n    /**\n     * Filter the elements by a category.\n     * @param {string} [category] Category to filter by. If it's given, the last\n     *     category will be used to filter the items.\n     * @param {Array} [collection] Optionally filter a collection. Defaults to\n     *     all the items.\n     * @return {!{visible: Array, hidden: Array}}\n     * @private\n     */\n\n  }, {\n    key: '_filter',\n    value: function _filter() {\n      var category = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.lastFilter;\n      var collection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.items;\n\n      var set$$1 = this._getFilteredSets(category, collection);\n\n      // Individually add/remove hidden/visible classes\n      this._toggleFilterClasses(set$$1);\n\n      // Save the last filter in case elements are appended.\n      this.lastFilter = category;\n\n      // This is saved mainly because providing a filter function (like searching)\n      // will overwrite the `lastFilter` property every time its called.\n      if (typeof category === 'string') {\n        this.group = category;\n      }\n\n      return set$$1;\n    }\n\n    /**\n     * Returns an object containing the visible and hidden elements.\n     * @param {string|Function} category Category or function to filter by.\n     * @param {Array.<Element>} items A collection of items to filter.\n     * @return {!{visible: Array, hidden: Array}}\n     * @private\n     */\n\n  }, {\n    key: '_getFilteredSets',\n    value: function _getFilteredSets(category, items) {\n      var _this = this;\n\n      var visible = [];\n      var hidden = [];\n\n      // category === 'all', add visible class to everything\n      if (category === Shuffle.ALL_ITEMS) {\n        visible = items;\n\n        // Loop through each item and use provided function to determine\n        // whether to hide it or not.\n      } else {\n        items.forEach(function (item) {\n          if (_this._doesPassFilter(category, item.element)) {\n            visible.push(item);\n          } else {\n            hidden.push(item);\n          }\n        });\n      }\n\n      return {\n        visible: visible,\n        hidden: hidden\n      };\n    }\n\n    /**\n     * Test an item to see if it passes a category.\n     * @param {string|Function} category Category or function to filter by.\n     * @param {Element} element An element to test.\n     * @return {boolean} Whether it passes the category/filter.\n     * @private\n     */\n\n  }, {\n    key: '_doesPassFilter',\n    value: function _doesPassFilter(category, element) {\n      if (typeof category === 'function') {\n        return category.call(element, element, this);\n      }\n\n      // Check each element's data-groups attribute against the given category.\n      var attr = element.getAttribute('data-' + Shuffle.FILTER_ATTRIBUTE_KEY);\n      var keys = this.options.delimeter ? attr.split(this.options.delimeter) : JSON.parse(attr);\n\n      function testCategory(category) {\n        return arrayIncludes(keys, category);\n      }\n\n      if (Array.isArray(category)) {\n        if (this.options.filterMode === Shuffle.FilterMode.ANY) {\n          return category.some(testCategory);\n        }\n        return category.every(testCategory);\n      }\n\n      return arrayIncludes(keys, category);\n    }\n\n    /**\n     * Toggles the visible and hidden class names.\n     * @param {{visible, hidden}} Object with visible and hidden arrays.\n     * @private\n     */\n\n  }, {\n    key: '_toggleFilterClasses',\n    value: function _toggleFilterClasses(_ref) {\n      var visible = _ref.visible,\n          hidden = _ref.hidden;\n\n      visible.forEach(function (item) {\n        item.show();\n      });\n\n      hidden.forEach(function (item) {\n        item.hide();\n      });\n    }\n\n    /**\n     * Set the initial css for each item\n     * @param {Array.<ShuffleItem>} [items] Optionally specifiy at set to initialize.\n     * @private\n     */\n\n  }, {\n    key: '_initItems',\n    value: function _initItems() {\n      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.items;\n\n      items.forEach(function (item) {\n        item.init();\n      });\n    }\n\n    /**\n     * Remove element reference and styles.\n     * @private\n     */\n\n  }, {\n    key: '_disposeItems',\n    value: function _disposeItems() {\n      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.items;\n\n      items.forEach(function (item) {\n        item.dispose();\n      });\n    }\n\n    /**\n     * Updates the visible item count.\n     * @private\n     */\n\n  }, {\n    key: '_updateItemCount',\n    value: function _updateItemCount() {\n      this.visibleItems = this._getFilteredItems().length;\n    }\n\n    /**\n     * Sets css transform transition on a group of elements. This is not executed\n     * at the same time as `item.init` so that transitions don't occur upon\n     * initialization of Shuffle.\n     * @param {Array.<ShuffleItem>} items Shuffle items to set transitions on.\n     * @private\n     */\n\n  }, {\n    key: '_setTransitions',\n    value: function _setTransitions() {\n      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.items;\n\n      var speed = this.options.speed;\n      var easing = this.options.easing;\n\n      var str = this.options.useTransforms ? 'transform ' + speed + 'ms ' + easing + ', opacity ' + speed + 'ms ' + easing : 'top ' + speed + 'ms ' + easing + ', left ' + speed + 'ms ' + easing + ', opacity ' + speed + 'ms ' + easing;\n\n      items.forEach(function (item) {\n        item.element.style.transition = str;\n      });\n    }\n  }, {\n    key: '_getItems',\n    value: function _getItems() {\n      var _this2 = this;\n\n      return toArray$$1(this.element.children).filter(function (el) {\n        return index(el, _this2.options.itemSelector);\n      }).map(function (el) {\n        return new ShuffleItem(el);\n      });\n    }\n\n    /**\n     * When new elements are added to the shuffle container, update the array of\n     * items because that is the order `_layout` calls them.\n     */\n\n  }, {\n    key: '_updateItemsOrder',\n    value: function _updateItemsOrder() {\n      var children = this.element.children;\n      this.items = sorter(this.items, {\n        by: function by(element) {\n          return Array.prototype.indexOf.call(children, element);\n        }\n      });\n    }\n  }, {\n    key: '_getFilteredItems',\n    value: function _getFilteredItems() {\n      return this.items.filter(function (item) {\n        return item.isVisible;\n      });\n    }\n  }, {\n    key: '_getConcealedItems',\n    value: function _getConcealedItems() {\n      return this.items.filter(function (item) {\n        return !item.isVisible;\n      });\n    }\n\n    /**\n     * Returns the column size, based on column width and sizer options.\n     * @param {number} containerWidth Size of the parent container.\n     * @param {number} gutterSize Size of the gutters.\n     * @return {number}\n     * @private\n     */\n\n  }, {\n    key: '_getColumnSize',\n    value: function _getColumnSize(containerWidth, gutterSize) {\n      var size = void 0;\n\n      // If the columnWidth property is a function, then the grid is fluid\n      if (typeof this.options.columnWidth === 'function') {\n        size = this.options.columnWidth(containerWidth);\n\n        // columnWidth option isn't a function, are they using a sizing element?\n      } else if (this.useSizer) {\n        size = Shuffle.getSize(this.options.sizer).width;\n\n        // if not, how about the explicitly set option?\n      } else if (this.options.columnWidth) {\n        size = this.options.columnWidth;\n\n        // or use the size of the first item\n      } else if (this.items.length > 0) {\n        size = Shuffle.getSize(this.items[0].element, true).width;\n\n        // if there's no items, use size of container\n      } else {\n        size = containerWidth;\n      }\n\n      // Don't let them set a column width of zero.\n      if (size === 0) {\n        size = containerWidth;\n      }\n\n      return size + gutterSize;\n    }\n\n    /**\n     * Returns the gutter size, based on gutter width and sizer options.\n     * @param {number} containerWidth Size of the parent container.\n     * @return {number}\n     * @private\n     */\n\n  }, {\n    key: '_getGutterSize',\n    value: function _getGutterSize(containerWidth) {\n      var size = void 0;\n      if (typeof this.options.gutterWidth === 'function') {\n        size = this.options.gutterWidth(containerWidth);\n      } else if (this.useSizer) {\n        size = getNumberStyle(this.options.sizer, 'marginLeft');\n      } else {\n        size = this.options.gutterWidth;\n      }\n\n      return size;\n    }\n\n    /**\n     * Calculate the number of columns to be used. Gets css if using sizer element.\n     * @param {number} [containerWidth] Optionally specify a container width if\n     *    it's already available.\n     */\n\n  }, {\n    key: '_setColumns',\n    value: function _setColumns() {\n      var containerWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Shuffle.getSize(this.element).width;\n\n      var gutter = this._getGutterSize(containerWidth);\n      var columnWidth = this._getColumnSize(containerWidth, gutter);\n      var calculatedColumns = (containerWidth + gutter) / columnWidth;\n\n      // Widths given from getStyles are not precise enough...\n      if (Math.abs(Math.round(calculatedColumns) - calculatedColumns) < this.options.columnThreshold) {\n        // e.g. calculatedColumns = 11.998876\n        calculatedColumns = Math.round(calculatedColumns);\n      }\n\n      this.cols = Math.max(Math.floor(calculatedColumns), 1);\n      this.containerWidth = containerWidth;\n      this.colWidth = columnWidth;\n    }\n\n    /**\n     * Adjust the height of the grid\n     */\n\n  }, {\n    key: '_setContainerSize',\n    value: function _setContainerSize() {\n      this.element.style.height = this._getContainerSize() + 'px';\n    }\n\n    /**\n     * Based on the column heights, it returns the biggest one.\n     * @return {number}\n     * @private\n     */\n\n  }, {\n    key: '_getContainerSize',\n    value: function _getContainerSize() {\n      return arrayMax(this.positions);\n    }\n\n    /**\n     * Get the clamped stagger amount.\n     * @param {number} index Index of the item to be staggered.\n     * @return {number}\n     */\n\n  }, {\n    key: '_getStaggerAmount',\n    value: function _getStaggerAmount(index$$1) {\n      return Math.min(index$$1 * this.options.staggerAmount, this.options.staggerAmountMax);\n    }\n\n    /**\n     * @return {boolean} Whether the event was prevented or not.\n     */\n\n  }, {\n    key: '_dispatch',\n    value: function _dispatch(name) {\n      var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (this.isDestroyed) {\n        return false;\n      }\n\n      details.shuffle = this;\n      return !this.element.dispatchEvent(new CustomEvent(name, {\n        bubbles: true,\n        cancelable: false,\n        detail: details\n      }));\n    }\n\n    /**\n     * Zeros out the y columns array, which is used to determine item placement.\n     * @private\n     */\n\n  }, {\n    key: '_resetCols',\n    value: function _resetCols() {\n      var i = this.cols;\n      this.positions = [];\n      while (i) {\n        i -= 1;\n        this.positions.push(0);\n      }\n    }\n\n    /**\n     * Loops through each item that should be shown and calculates the x, y position.\n     * @param {Array.<ShuffleItem>} items Array of items that will be shown/layed\n     *     out in order in their array.\n     */\n\n  }, {\n    key: '_layout',\n    value: function _layout(items) {\n      var _this3 = this;\n\n      var count = 0;\n      items.forEach(function (item) {\n        var currPos = item.point;\n        var currScale = item.scale;\n        var itemSize = Shuffle.getSize(item.element, true);\n        var pos = _this3._getItemPosition(itemSize);\n\n        function callback() {\n          item.element.style.transitionDelay = '';\n          item.applyCss(ShuffleItem.Css.VISIBLE.after);\n        }\n\n        // If the item will not change its position, do not add it to the render\n        // queue. Transitions don't fire when setting a property to the same value.\n        if (Point.equals(currPos, pos) && currScale === ShuffleItem.Scale.VISIBLE) {\n          item.applyCss(ShuffleItem.Css.VISIBLE.before);\n          callback();\n          return;\n        }\n\n        item.point = pos;\n        item.scale = ShuffleItem.Scale.VISIBLE;\n\n        // Use xtend here to clone the object so that the `before` object isn't\n        // modified when the transition delay is added.\n        var styles = immutable(ShuffleItem.Css.VISIBLE.before);\n        styles.transitionDelay = _this3._getStaggerAmount(count) + 'ms';\n\n        _this3._queue.push({\n          item: item,\n          styles: styles,\n          callback: callback\n        });\n\n        count += 1;\n      });\n    }\n\n    /**\n     * Determine the location of the next item, based on its size.\n     * @param {{width: number, height: number}} itemSize Object with width and height.\n     * @return {Point}\n     * @private\n     */\n\n  }, {\n    key: '_getItemPosition',\n    value: function _getItemPosition(itemSize) {\n      return getItemPosition({\n        itemSize: itemSize,\n        positions: this.positions,\n        gridSize: this.colWidth,\n        total: this.cols,\n        threshold: this.options.columnThreshold,\n        buffer: this.options.buffer\n      });\n    }\n\n    /**\n     * Hides the elements that don't match our filter.\n     * @param {Array.<ShuffleItem>} collection Collection to shrink.\n     * @private\n     */\n\n  }, {\n    key: '_shrink',\n    value: function _shrink() {\n      var _this4 = this;\n\n      var collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._getConcealedItems();\n\n      var count = 0;\n      collection.forEach(function (item) {\n        function callback() {\n          item.applyCss(ShuffleItem.Css.HIDDEN.after);\n        }\n\n        // Continuing would add a transitionend event listener to the element, but\n        // that listener would not execute because the transform and opacity would\n        // stay the same.\n        // The callback is executed here because it is not guaranteed to be called\n        // after the transitionend event because the transitionend could be\n        // canceled if another animation starts.\n        if (item.scale === ShuffleItem.Scale.HIDDEN) {\n          item.applyCss(ShuffleItem.Css.HIDDEN.before);\n          callback();\n          return;\n        }\n\n        item.scale = ShuffleItem.Scale.HIDDEN;\n\n        var styles = immutable(ShuffleItem.Css.HIDDEN.before);\n        styles.transitionDelay = _this4._getStaggerAmount(count) + 'ms';\n\n        _this4._queue.push({\n          item: item,\n          styles: styles,\n          callback: callback\n        });\n\n        count += 1;\n      });\n    }\n\n    /**\n     * Resize handler.\n     * @private\n     */\n\n  }, {\n    key: '_handleResize',\n    value: function _handleResize() {\n      // If shuffle is disabled, destroyed, don't do anything\n      if (!this.isEnabled || this.isDestroyed) {\n        return;\n      }\n\n      // Will need to check height in the future if it's layed out horizontaly\n      var containerWidth = Shuffle.getSize(this.element).width;\n\n      // containerWidth hasn't changed, don't do anything\n      if (containerWidth === this.containerWidth) {\n        return;\n      }\n\n      this.update();\n    }\n\n    /**\n     * Returns styles which will be applied to the an item for a transition.\n     * @param {Object} obj Transition options.\n     * @return {!Object} Transforms for transitions, left/top for animate.\n     * @private\n     */\n\n  }, {\n    key: '_getStylesForTransition',\n    value: function _getStylesForTransition(_ref2) {\n      var item = _ref2.item,\n          styles = _ref2.styles;\n\n      if (!styles.transitionDelay) {\n        styles.transitionDelay = '0ms';\n      }\n\n      var x = item.point.x;\n      var y = item.point.y;\n\n      if (this.options.useTransforms) {\n        styles.transform = 'translate(' + x + 'px, ' + y + 'px) scale(' + item.scale + ')';\n      } else {\n        styles.left = x + 'px';\n        styles.top = y + 'px';\n      }\n\n      return styles;\n    }\n\n    /**\n     * Listen for the transition end on an element and execute the itemCallback\n     * when it finishes.\n     * @param {Element} element Element to listen on.\n     * @param {Function} itemCallback Callback for the item.\n     * @param {Function} done Callback to notify `parallel` that this one is done.\n     */\n\n  }, {\n    key: '_whenTransitionDone',\n    value: function _whenTransitionDone(element, itemCallback, done) {\n      var id = onTransitionEnd(element, function (evt) {\n        itemCallback();\n        done(null, evt);\n      });\n\n      this._transitions.push(id);\n    }\n\n    /**\n     * Return a function which will set CSS styles and call the `done` function\n     * when (if) the transition finishes.\n     * @param {Object} opts Transition object.\n     * @return {Function} A function to be called with a `done` function.\n     */\n\n  }, {\n    key: '_getTransitionFunction',\n    value: function _getTransitionFunction(opts) {\n      var _this5 = this;\n\n      return function (done) {\n        opts.item.applyCss(_this5._getStylesForTransition(opts));\n        _this5._whenTransitionDone(opts.item.element, opts.callback, done);\n      };\n    }\n\n    /**\n     * Execute the styles gathered in the style queue. This applies styles to elements,\n     * triggering transitions.\n     * @private\n     */\n\n  }, {\n    key: '_processQueue',\n    value: function _processQueue() {\n      if (this.isTransitioning) {\n        this._cancelMovement();\n      }\n\n      var hasSpeed = this.options.speed > 0;\n      var hasQueue = this._queue.length > 0;\n\n      if (hasQueue && hasSpeed && this.isInitialized) {\n        this._startTransitions(this._queue);\n      } else if (hasQueue) {\n        this._styleImmediately(this._queue);\n        this._dispatchLayout();\n\n        // A call to layout happened, but none of the newly visible items will\n        // change position or the transition duration is zero, which will not trigger\n        // the transitionend event.\n      } else {\n        this._dispatchLayout();\n      }\n\n      // Remove everything in the style queue\n      this._queue.length = 0;\n    }\n\n    /**\n     * Wait for each transition to finish, the emit the layout event.\n     * @param {Array.<Object>} transitions Array of transition objects.\n     */\n\n  }, {\n    key: '_startTransitions',\n    value: function _startTransitions(transitions) {\n      var _this6 = this;\n\n      // Set flag that shuffle is currently in motion.\n      this.isTransitioning = true;\n\n      // Create an array of functions to be called.\n      var callbacks = transitions.map(function (obj) {\n        return _this6._getTransitionFunction(obj);\n      });\n\n      index$3(callbacks, this._movementFinished.bind(this));\n    }\n  }, {\n    key: '_cancelMovement',\n    value: function _cancelMovement() {\n      // Remove the transition end event for each listener.\n      this._transitions.forEach(cancelTransitionEnd);\n\n      // Reset the array.\n      this._transitions.length = 0;\n\n      // Show it's no longer active.\n      this.isTransitioning = false;\n    }\n\n    /**\n     * Apply styles without a transition.\n     * @param {Array.<Object>} objects Array of transition objects.\n     * @private\n     */\n\n  }, {\n    key: '_styleImmediately',\n    value: function _styleImmediately(objects) {\n      var _this7 = this;\n\n      if (objects.length) {\n        var elements = objects.map(function (obj) {\n          return obj.item.element;\n        });\n\n        Shuffle._skipTransitions(elements, function () {\n          objects.forEach(function (obj) {\n            obj.item.applyCss(_this7._getStylesForTransition(obj));\n            obj.callback();\n          });\n        });\n      }\n    }\n  }, {\n    key: '_movementFinished',\n    value: function _movementFinished() {\n      this._transitions.length = 0;\n      this.isTransitioning = false;\n      this._dispatchLayout();\n    }\n  }, {\n    key: '_dispatchLayout',\n    value: function _dispatchLayout() {\n      this._dispatch(Shuffle.EventType.LAYOUT);\n    }\n\n    /**\n     * The magic. This is what makes the plugin 'shuffle'\n     * @param {string|Function|Array.<string>} [category] Category to filter by.\n     *     Can be a function, string, or array of strings.\n     * @param {Object} [sortObj] A sort object which can sort the visible set\n     */\n\n  }, {\n    key: 'filter',\n    value: function filter(category, sortObj) {\n      if (!this.isEnabled) {\n        return;\n      }\n\n      if (!category || category && category.length === 0) {\n        category = Shuffle.ALL_ITEMS; // eslint-disable-line no-param-reassign\n      }\n\n      this._filter(category);\n\n      // Shrink each hidden item\n      this._shrink();\n\n      // How many visible elements?\n      this._updateItemCount();\n\n      // Update transforms on visible elements so they will animate to their new positions.\n      this.sort(sortObj);\n    }\n\n    /**\n     * Gets the visible elements, sorts them, and passes them to layout.\n     * @param {Object} opts the options object for the sorted plugin\n     */\n\n  }, {\n    key: 'sort',\n    value: function sort() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.lastSort;\n\n      if (!this.isEnabled) {\n        return;\n      }\n\n      this._resetCols();\n\n      var items = this._getFilteredItems();\n      items = sorter(items, opts);\n\n      this._layout(items);\n\n      // `_layout` always happens after `_shrink`, so it's safe to process the style\n      // queue here with styles from the shrink method.\n      this._processQueue();\n\n      // Adjust the height of the container.\n      this._setContainerSize();\n\n      this.lastSort = opts;\n    }\n\n    /**\n     * Reposition everything.\n     * @param {boolean} isOnlyLayout If true, column and gutter widths won't be\n     *     recalculated.\n     */\n\n  }, {\n    key: 'update',\n    value: function update(isOnlyLayout) {\n      if (this.isEnabled) {\n        if (!isOnlyLayout) {\n          // Get updated colCount\n          this._setColumns();\n        }\n\n        // Layout items\n        this.sort();\n      }\n    }\n\n    /**\n     * Use this instead of `update()` if you don't need the columns and gutters updated\n     * Maybe an image inside `shuffle` loaded (and now has a height), which means calculations\n     * could be off.\n     */\n\n  }, {\n    key: 'layout',\n    value: function layout() {\n      this.update(true);\n    }\n\n    /**\n     * New items have been appended to shuffle. Mix them in with the current\n     * filter or sort status.\n     * @param {Array.<Element>} newItems Collection of new items.\n     */\n\n  }, {\n    key: 'add',\n    value: function add(newItems) {\n      var items = index$1(newItems).map(function (el) {\n        return new ShuffleItem(el);\n      });\n\n      // Add classes and set initial positions.\n      this._initItems(items);\n\n      // Add transition to each item.\n      this._setTransitions(items);\n\n      // Update the list of items.\n      this.items = this.items.concat(items);\n      this._updateItemsOrder();\n      this.filter(this.lastFilter);\n    }\n\n    /**\n     * Disables shuffle from updating dimensions and layout on resize\n     */\n\n  }, {\n    key: 'disable',\n    value: function disable() {\n      this.isEnabled = false;\n    }\n\n    /**\n     * Enables shuffle again\n     * @param {boolean} [isUpdateLayout=true] if undefined, shuffle will update columns and gutters\n     */\n\n  }, {\n    key: 'enable',\n    value: function enable(isUpdateLayout) {\n      this.isEnabled = true;\n      if (isUpdateLayout !== false) {\n        this.update();\n      }\n    }\n\n    /**\n     * Remove 1 or more shuffle items\n     * @param {Array.<Element>} elements An array containing one or more\n     *     elements in shuffle\n     * @return {Shuffle} The shuffle object\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(elements) {\n      var _this8 = this;\n\n      if (!elements.length) {\n        return;\n      }\n\n      var collection = index$1(elements);\n\n      var oldItems = collection.map(function (element) {\n        return _this8.getItemByElement(element);\n      }).filter(function (item) {\n        return !!item;\n      });\n\n      var handleLayout = function handleLayout() {\n        _this8.element.removeEventListener(Shuffle.EventType.LAYOUT, handleLayout);\n        _this8._disposeItems(oldItems);\n\n        // Remove the collection in the callback\n        collection.forEach(function (element) {\n          element.parentNode.removeChild(element);\n        });\n\n        _this8._dispatch(Shuffle.EventType.REMOVED, { collection: collection });\n      };\n\n      // Hide collection first.\n      this._toggleFilterClasses({\n        visible: [],\n        hidden: oldItems\n      });\n\n      this._shrink(oldItems);\n\n      this.sort();\n\n      // Update the list of items here because `remove` could be called again\n      // with an item that is in the process of being removed.\n      this.items = this.items.filter(function (item) {\n        return !arrayIncludes(oldItems, item);\n      });\n      this._updateItemCount();\n\n      this.element.addEventListener(Shuffle.EventType.LAYOUT, handleLayout);\n    }\n\n    /**\n     * Retrieve a shuffle item by its element.\n     * @param {Element} element Element to look for.\n     * @return {?ShuffleItem} A shuffle item or null if it's not found.\n     */\n\n  }, {\n    key: 'getItemByElement',\n    value: function getItemByElement(element) {\n      for (var i = this.items.length - 1; i >= 0; i--) {\n        if (this.items[i].element === element) {\n          return this.items[i];\n        }\n      }\n\n      return null;\n    }\n\n    /**\n     * Destroys shuffle, removes events, styles, and classes\n     */\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this._cancelMovement();\n      window.removeEventListener('resize', this._onResize);\n\n      // Reset container styles\n      this.element.classList.remove('shuffle');\n      this.element.removeAttribute('style');\n\n      // Reset individual item styles\n      this._disposeItems();\n\n      // Null DOM references\n      this.items = null;\n      this.options.sizer = null;\n      this.element = null;\n      this._transitions = null;\n\n      // Set a flag so if a debounced resize has been triggered,\n      // it can first check if it is actually isDestroyed and not doing anything\n      this.isDestroyed = true;\n    }\n\n    /**\n     * Returns the outer width of an element, optionally including its margins.\n     *\n     * There are a few different methods for getting the width of an element, none of\n     * which work perfectly for all Shuffle's use cases.\n     *\n     * 1. getBoundingClientRect() `left` and `right` properties.\n     *   - Accounts for transform scaled elements, making it useless for Shuffle\n     *   elements which have shrunk.\n     * 2. The `offsetWidth` property.\n     *   - This value stays the same regardless of the elements transform property,\n     *   however, it does not return subpixel values.\n     * 3. getComputedStyle()\n     *   - This works great Chrome, Firefox, Safari, but IE<=11 does not include\n     *   padding and border when box-sizing: border-box is set, requiring a feature\n     *   test and extra work to add the padding back for IE and other browsers which\n     *   follow the W3C spec here.\n     *\n     * @param {Element} element The element.\n     * @param {boolean} [includeMargins] Whether to include margins. Default is false.\n     * @return {{width: number, height: number}} The width and height.\n     */\n\n  }], [{\n    key: 'getSize',\n    value: function getSize(element, includeMargins) {\n      // Store the styles so that they can be used by others without asking for it again.\n      var styles = window.getComputedStyle(element, null);\n      var width = getNumberStyle(element, 'width', styles);\n      var height = getNumberStyle(element, 'height', styles);\n\n      if (includeMargins) {\n        var marginLeft = getNumberStyle(element, 'marginLeft', styles);\n        var marginRight = getNumberStyle(element, 'marginRight', styles);\n        var marginTop = getNumberStyle(element, 'marginTop', styles);\n        var marginBottom = getNumberStyle(element, 'marginBottom', styles);\n        width += marginLeft + marginRight;\n        height += marginTop + marginBottom;\n      }\n\n      return {\n        width: width,\n        height: height\n      };\n    }\n\n    /**\n     * Change a property or execute a function which will not have a transition\n     * @param {Array.<Element>} elements DOM elements that won't be transitioned.\n     * @param {Function} callback A function which will be called while transition\n     *     is set to 0ms.\n     * @private\n     */\n\n  }, {\n    key: '_skipTransitions',\n    value: function _skipTransitions(elements, callback) {\n      var zero = '0ms';\n\n      // Save current duration and delay.\n      var data = elements.map(function (element) {\n        var style = element.style;\n        var duration = style.transitionDuration;\n        var delay = style.transitionDelay;\n\n        // Set the duration to zero so it happens immediately\n        style.transitionDuration = zero;\n        style.transitionDelay = zero;\n\n        return {\n          duration: duration,\n          delay: delay\n        };\n      });\n\n      callback();\n\n      // Cause reflow.\n      elements[0].offsetWidth; // eslint-disable-line no-unused-expressions\n\n      // Put the duration back\n      elements.forEach(function (element, i) {\n        element.style.transitionDuration = data[i].duration;\n        element.style.transitionDelay = data[i].delay;\n      });\n    }\n  }]);\n  return Shuffle;\n}();\n\nShuffle.ShuffleItem = ShuffleItem;\n\nShuffle.ALL_ITEMS = 'all';\nShuffle.FILTER_ATTRIBUTE_KEY = 'groups';\n\n/**\n * @enum {string}\n */\nShuffle.EventType = {\n  LAYOUT: 'shuffle:layout',\n  REMOVED: 'shuffle:removed'\n};\n\n/** @enum {string} */\nShuffle.Classes = Classes;\n\n/**\n * @enum {string}\n */\nShuffle.FilterMode = {\n  ANY: 'any',\n  ALL: 'all'\n};\n\n// Overrideable options\nShuffle.options = {\n  // Initial filter group.\n  group: Shuffle.ALL_ITEMS,\n\n  // Transition/animation speed (milliseconds).\n  speed: 250,\n\n  // CSS easing function to use.\n  easing: 'ease',\n\n  // e.g. '.picture-item'.\n  itemSelector: '*',\n\n  // Element or selector string. Use an element to determine the size of columns\n  // and gutters.\n  sizer: null,\n\n  // A static number or function that tells the plugin how wide the gutters\n  // between columns are (in pixels).\n  gutterWidth: 0,\n\n  // A static number or function that returns a number which tells the plugin\n  // how wide the columns are (in pixels).\n  columnWidth: 0,\n\n  // If your group is not json, and is comma delimeted, you could set delimeter\n  // to ','.\n  delimeter: null,\n\n  // Useful for percentage based heights when they might not always be exactly\n  // the same (in pixels).\n  buffer: 0,\n\n  // Reading the width of elements isn't precise enough and can cause columns to\n  // jump between values.\n  columnThreshold: 0.01,\n\n  // Shuffle can be isInitialized with a sort object. It is the same object\n  // given to the sort method.\n  initialSort: null,\n\n  // By default, shuffle will throttle resize events. This can be changed or\n  // removed.\n  throttle: index$2,\n\n  // How often shuffle can be called on resize (in milliseconds).\n  throttleTime: 300,\n\n  // Transition delay offset for each item in milliseconds.\n  staggerAmount: 15,\n\n  // Maximum stagger delay in milliseconds.\n  staggerAmountMax: 250,\n\n  // Whether to use transforms or absolute positioning.\n  useTransforms: true,\n\n  // Affects using an array with filter. e.g. `filter(['one', 'two'])`. With \"any\",\n  // the element passes the test if any of its groups are in the array. With \"all\",\n  // the element only passes if all groups are in the array.\n  filterMode: Shuffle.FilterMode.ANY\n};\n\n// Expose for testing. Hack at your own risk.\nShuffle.__Point = Point;\nShuffle.__sorter = sorter;\nShuffle.__getColumnSpan = getColumnSpan;\nShuffle.__getAvailablePositions = getAvailablePositions;\nShuffle.__getShortColumn = getShortColumn;\n\nreturn Shuffle;\n\n})));\n//# sourceMappingURL=shuffle.js.map\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_normalize_css__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_normalize_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_normalize_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__css_paraxify_css__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__css_paraxify_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__css_paraxify_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styl_home_styl__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styl_home_styl___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__styl_home_styl__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__js_paraxify__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__js_paraxify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__js_paraxify__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_shufflejs__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_shufflejs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_shufflejs__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__vimeo_player__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__vimeo_player___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__vimeo_player__);\n\n\n\n\n\n\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.addEventListener('scroll', () => {\n        const scroll = document.body.scrollTop;\n        if (scroll > 400) {\n            document.querySelector('.header').classList.add('affix');\n        } else {\n            document.querySelector('.header').classList.remove('affix');\n        }\n    });\n\n    document.getElementById('mobile-menu').addEventListener('click', () => {\n        document.querySelector('header.header').classList.toggle('active');\n    });\n\n    // Adjusts cover video size\n    const adjustVideo = () => {\n        const w = window.innerWidth;\n        if (w > 768 && top.offsetHeight > v.offsetHeight) {\n            const vRatio = (v.videoHeight - 20) / v.videoWidth;\n            top.style.height = (vRatio * w) + 'px';\n        }\n    }\n    const top = document.querySelector('.top');\n    const v = document.getElementsByTagName('video')[0];\n    if (v) {\n        v.addEventListener('loadeddata', () => {\n            adjustVideo();\n        });\n    }\n\n    // Parallax home page\n    paraxify('.paraxify');\n\n    // Adjusts home page projects container size\n    const adjustProjectContainers = () => {\n        const w = window.innerWidth;\n        const containers = document.querySelectorAll('.project-container');\n        if (w > 868) {\n            containers.forEach((c) => {\n                c.style.height = (c.querySelector('.project_big img').clientHeight - 2) + 'px';\n            });\n        } else {\n            containers.forEach((c) => {\n                c.style.height = null;\n            });\n        }\n    };\n    adjustProjectContainers();\n\n    // Vimeo lightbox\n    document.querySelectorAll('.start-video').forEach((d) => {\n        d.addEventListener('click', (e) => {\n            e.preventDefault();\n            const overlay = document.createElement('div');\n            overlay.id = 'body-overlay';\n            overlay.classList.add('body-overlay');\n            document.body.appendChild(overlay);\n            const close = document.createElement('span');\n            close.classList.add('fa');\n            close.classList.add('fa-close');\n            close.addEventListener('click', () => {\n                overlay.parentNode.removeChild(overlay);\n            });\n            overlay.addEventListener('click', (e) => {\n                if (e.target.id === 'body-overlay') {\n                    overlay.parentNode.removeChild(overlay);\n                }\n            });\n            overlay.appendChild(close);\n            const video = document.createElement('div');\n            video.classList.add('video-player');\n            overlay.appendChild(video);\n            const width = (overlay.offsetWidth * 0.8).toFixed(0);\n            const player = new __WEBPACK_IMPORTED_MODULE_5__vimeo_player___default.a(video, {\n                id: e.target.dataset.id,\n                width\n            });\n        });\n    });\n\n    // Clients testimonials\n    let testPosition = 0;\n    const moveTestimonials = (direction) => {\n        const testContainer = document.getElementById('testimonial-container');\n        const testCount = document.querySelectorAll('.testimonial-content').length;\n        if (direction === 'right') {\n            if (testPosition < testCount - 1) {\n                const move = (testPosition + 1) * 100;\n                testContainer.style.transform = `translateX(-${move}%)`;\n                testPosition++;\n            } else {\n                testContainer.style.transform = 'translateX(0)';\n                testPosition = 0;\n            }\n        } else {\n            if (testPosition > 0) {\n                const move = (testPosition - 1) * 100;\n                testContainer.style.transform = `translateX(-${move}%)`;\n                testPosition--;\n            } else {\n                const move = (testCount - 1) * 100;\n                testContainer.style.transform = `translateX(-${move}%)`;\n                testPosition = testCount - 1;\n            }\n        }\n    };\n\n    const startTestimonials = (el, direction) => {\n        el.addEventListener('click', () => {\n            moveTestimonials(direction);\n        });\n    };\n\n    const arrowLeft = document.getElementById('testimonial-control-left');\n    const arrowRight = document.getElementById('testimonial-control-right');\n    if (arrowRight && arrowLeft) {\n        startTestimonials(arrowLeft, 'left');\n        startTestimonials(arrowRight, 'right');\n        setInterval(() => {\n            moveTestimonials('right');\n        }, 8000);\n    }\n\n    // Shuffle for projects page\n    const grid = document.getElementById('grid');\n    if (grid) {\n        const shuffle = new __WEBPACK_IMPORTED_MODULE_4_shufflejs___default.a(grid, {\n          itemSelector: '.projects-content_item',\n          gutterWidth: 20,\n          columnWidth: (w) => {\n            let width = (w / 3) - 15;\n            if (w < 400) {\n                width = w;\n            } else if (w < 750) {\n                width = (w / 2) - 10;\n            }\n            document.querySelectorAll('.projects-content_item').forEach((item) => {\n                item.style.width = width + 'px';\n                item.style.height = width + 'px';\n            });\n            return width;\n          },\n        });\n        document.querySelectorAll('.project-filter-button').forEach((button) => {\n            button.addEventListener('click', (e) => {\n                e.target.classList.toggle('active');\n                shuffle.filter(e.target.id);\n            })\n        });\n    }\n\n    const onResize = () => {\n        adjustProjectContainers();\n        if (v) {\n            adjustVideo();\n        }\n    };\n    window.onresize = onResize;\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2hvbWUvc3RhdGljL2hvbWUvanMvaG9tZS5qcz8wYzlkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnbm9ybWFsaXplLmNzcyc7XG5pbXBvcnQgJy4vLi4vY3NzL3BhcmF4aWZ5LmNzcyc7XG5pbXBvcnQgJy4vLi4vc3R5bC9ob21lLnN0eWwnO1xuXG5pbXBvcnQgJy4vLi4vanMvcGFyYXhpZnknO1xuaW1wb3J0IFNodWZmbGUgZnJvbSAnc2h1ZmZsZWpzJztcbmltcG9ydCBWaW1lbyBmcm9tICdAdmltZW8vcGxheWVyJztcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzY3JvbGwgPSBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDtcbiAgICAgICAgaWYgKHNjcm9sbCA+IDQwMCkge1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcicpLmNsYXNzTGlzdC5hZGQoJ2FmZml4Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyJykuY2xhc3NMaXN0LnJlbW92ZSgnYWZmaXgnKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vYmlsZS1tZW51JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWRlci5oZWFkZXInKS5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnKTtcbiAgICB9KTtcblxuICAgIC8vIEFkanVzdHMgY292ZXIgdmlkZW8gc2l6ZVxuICAgIGNvbnN0IGFkanVzdFZpZGVvID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB3ID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgIGlmICh3ID4gNzY4ICYmIHRvcC5vZmZzZXRIZWlnaHQgPiB2Lm9mZnNldEhlaWdodCkge1xuICAgICAgICAgICAgY29uc3QgdlJhdGlvID0gKHYudmlkZW9IZWlnaHQgLSAyMCkgLyB2LnZpZGVvV2lkdGg7XG4gICAgICAgICAgICB0b3Auc3R5bGUuaGVpZ2h0ID0gKHZSYXRpbyAqIHcpICsgJ3B4JztcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB0b3AgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG9wJyk7XG4gICAgY29uc3QgdiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCd2aWRlbycpWzBdO1xuICAgIGlmICh2KSB7XG4gICAgICAgIHYuYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVkZGF0YScsICgpID0+IHtcbiAgICAgICAgICAgIGFkanVzdFZpZGVvKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFBhcmFsbGF4IGhvbWUgcGFnZVxuICAgIHBhcmF4aWZ5KCcucGFyYXhpZnknKTtcblxuICAgIC8vIEFkanVzdHMgaG9tZSBwYWdlIHByb2plY3RzIGNvbnRhaW5lciBzaXplXG4gICAgY29uc3QgYWRqdXN0UHJvamVjdENvbnRhaW5lcnMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHcgPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgY29uc3QgY29udGFpbmVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcm9qZWN0LWNvbnRhaW5lcicpO1xuICAgICAgICBpZiAodyA+IDg2OCkge1xuICAgICAgICAgICAgY29udGFpbmVycy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgICAgICAgICAgYy5zdHlsZS5oZWlnaHQgPSAoYy5xdWVyeVNlbGVjdG9yKCcucHJvamVjdF9iaWcgaW1nJykuY2xpZW50SGVpZ2h0IC0gMikgKyAncHgnO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250YWluZXJzLmZvckVhY2goKGMpID0+IHtcbiAgICAgICAgICAgICAgICBjLnN0eWxlLmhlaWdodCA9IG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgYWRqdXN0UHJvamVjdENvbnRhaW5lcnMoKTtcblxuICAgIC8vIFZpbWVvIGxpZ2h0Ym94XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnN0YXJ0LXZpZGVvJykuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBkLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIG92ZXJsYXkuaWQgPSAnYm9keS1vdmVybGF5JztcbiAgICAgICAgICAgIG92ZXJsYXkuY2xhc3NMaXN0LmFkZCgnYm9keS1vdmVybGF5Jyk7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG92ZXJsYXkpO1xuICAgICAgICAgICAgY29uc3QgY2xvc2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICBjbG9zZS5jbGFzc0xpc3QuYWRkKCdmYScpO1xuICAgICAgICAgICAgY2xvc2UuY2xhc3NMaXN0LmFkZCgnZmEtY2xvc2UnKTtcbiAgICAgICAgICAgIGNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIG92ZXJsYXkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvdmVybGF5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgb3ZlcmxheS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmlkID09PSAnYm9keS1vdmVybGF5Jykge1xuICAgICAgICAgICAgICAgICAgICBvdmVybGF5LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob3ZlcmxheSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBvdmVybGF5LmFwcGVuZENoaWxkKGNsb3NlKTtcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICB2aWRlby5jbGFzc0xpc3QuYWRkKCd2aWRlby1wbGF5ZXInKTtcbiAgICAgICAgICAgIG92ZXJsYXkuYXBwZW5kQ2hpbGQodmlkZW8pO1xuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSAob3ZlcmxheS5vZmZzZXRXaWR0aCAqIDAuOCkudG9GaXhlZCgwKTtcbiAgICAgICAgICAgIGNvbnN0IHBsYXllciA9IG5ldyBWaW1lbyh2aWRlbywge1xuICAgICAgICAgICAgICAgIGlkOiBlLnRhcmdldC5kYXRhc2V0LmlkLFxuICAgICAgICAgICAgICAgIHdpZHRoXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBDbGllbnRzIHRlc3RpbW9uaWFsc1xuICAgIGxldCB0ZXN0UG9zaXRpb24gPSAwO1xuICAgIGNvbnN0IG1vdmVUZXN0aW1vbmlhbHMgPSAoZGlyZWN0aW9uKSA9PiB7XG4gICAgICAgIGNvbnN0IHRlc3RDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGVzdGltb25pYWwtY29udGFpbmVyJyk7XG4gICAgICAgIGNvbnN0IHRlc3RDb3VudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50ZXN0aW1vbmlhbC1jb250ZW50JykubGVuZ3RoO1xuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICBpZiAodGVzdFBvc2l0aW9uIDwgdGVzdENvdW50IC0gMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vdmUgPSAodGVzdFBvc2l0aW9uICsgMSkgKiAxMDA7XG4gICAgICAgICAgICAgICAgdGVzdENvbnRhaW5lci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgtJHttb3ZlfSUpYDtcbiAgICAgICAgICAgICAgICB0ZXN0UG9zaXRpb24rKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGVzdENvbnRhaW5lci5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWCgwKSc7XG4gICAgICAgICAgICAgICAgdGVzdFBvc2l0aW9uID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0ZXN0UG9zaXRpb24gPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbW92ZSA9ICh0ZXN0UG9zaXRpb24gLSAxKSAqIDEwMDtcbiAgICAgICAgICAgICAgICB0ZXN0Q29udGFpbmVyLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKC0ke21vdmV9JSlgO1xuICAgICAgICAgICAgICAgIHRlc3RQb3NpdGlvbi0tO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtb3ZlID0gKHRlc3RDb3VudCAtIDEpICogMTAwO1xuICAgICAgICAgICAgICAgIHRlc3RDb250YWluZXIuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoLSR7bW92ZX0lKWA7XG4gICAgICAgICAgICAgICAgdGVzdFBvc2l0aW9uID0gdGVzdENvdW50IC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBzdGFydFRlc3RpbW9uaWFscyA9IChlbCwgZGlyZWN0aW9uKSA9PiB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgbW92ZVRlc3RpbW9uaWFscyhkaXJlY3Rpb24pO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgYXJyb3dMZWZ0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rlc3RpbW9uaWFsLWNvbnRyb2wtbGVmdCcpO1xuICAgIGNvbnN0IGFycm93UmlnaHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGVzdGltb25pYWwtY29udHJvbC1yaWdodCcpO1xuICAgIGlmIChhcnJvd1JpZ2h0ICYmIGFycm93TGVmdCkge1xuICAgICAgICBzdGFydFRlc3RpbW9uaWFscyhhcnJvd0xlZnQsICdsZWZ0Jyk7XG4gICAgICAgIHN0YXJ0VGVzdGltb25pYWxzKGFycm93UmlnaHQsICdyaWdodCcpO1xuICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICBtb3ZlVGVzdGltb25pYWxzKCdyaWdodCcpO1xuICAgICAgICB9LCA4MDAwKTtcbiAgICB9XG5cbiAgICAvLyBTaHVmZmxlIGZvciBwcm9qZWN0cyBwYWdlXG4gICAgY29uc3QgZ3JpZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdncmlkJyk7XG4gICAgaWYgKGdyaWQpIHtcbiAgICAgICAgY29uc3Qgc2h1ZmZsZSA9IG5ldyBTaHVmZmxlKGdyaWQsIHtcbiAgICAgICAgICBpdGVtU2VsZWN0b3I6ICcucHJvamVjdHMtY29udGVudF9pdGVtJyxcbiAgICAgICAgICBndXR0ZXJXaWR0aDogMjAsXG4gICAgICAgICAgY29sdW1uV2lkdGg6ICh3KSA9PiB7XG4gICAgICAgICAgICBsZXQgd2lkdGggPSAodyAvIDMpIC0gMTU7XG4gICAgICAgICAgICBpZiAodyA8IDQwMCkge1xuICAgICAgICAgICAgICAgIHdpZHRoID0gdztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodyA8IDc1MCkge1xuICAgICAgICAgICAgICAgIHdpZHRoID0gKHcgLyAyKSAtIDEwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnByb2plY3RzLWNvbnRlbnRfaXRlbScpLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBpdGVtLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xuICAgICAgICAgICAgICAgIGl0ZW0uc3R5bGUuaGVpZ2h0ID0gd2lkdGggKyAncHgnO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gd2lkdGg7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcm9qZWN0LWZpbHRlci1idXR0b24nKS5mb3JFYWNoKChidXR0b24pID0+IHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LnRvZ2dsZSgnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgc2h1ZmZsZS5maWx0ZXIoZS50YXJnZXQuaWQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qgb25SZXNpemUgPSAoKSA9PiB7XG4gICAgICAgIGFkanVzdFByb2plY3RDb250YWluZXJzKCk7XG4gICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICBhZGp1c3RWaWRlbygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB3aW5kb3cub25yZXNpemUgPSBvblJlc2l6ZTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ob21lL3N0YXRpYy9ob21lL2pzL2hvbWUuanNcbi8vIG1vZHVsZSBpZCA9IDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vcHJvY2Vzcy9icm93c2VyLmpzPzgyZTQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9wcm9jZXNzL2Jyb3dzZXIuanNcbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(8)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

eval("var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(9);\nexports.setImmediate = setImmediate;\nexports.clearImmediate = clearImmediate;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3RpbWVycy1icm93c2VyaWZ5L21haW4uanM/YjA4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCB3aW5kb3csIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHdpbmRvdywgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG5leHBvcnRzLnNldEltbWVkaWF0ZSA9IHNldEltbWVkaWF0ZTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ })
/******/ ]);